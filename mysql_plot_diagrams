#!/bin/bash

set -o nounset
set -o errexit
set -o pipefail

################################################################################
# VARIABLES/CONSTANTS
################################################################################

c_default_log_files_glob="*.log"
c_diagram_file_data_extension=txt
c_diagram_file_extension=png
c_aggregates_file_prefix=aggregates_
c_aggregates_file_extension=txt
c_single_diagram_basename=all_vars

# Executed as `perl -lane` code, with the values sent to stdin; the operations must print the result.
#
declare -A c_aggregates=(
  [average]='$total += $F[0]; END { print $total / $. }'
  [sum]='$total += $F[0]; END { print $total }'
)

c_help="Usage: $(basename "$0") [(-g|--log-files-glob) <pattern>] [(-s|--start <base_0_index>)] [(-o|--only) var_name{,var_name...}] [(-1|--single-diagram)] [(-a|--aggregate) <function>] [(-d|--destination) <dir>] <stats_dir_1> {<stats_dir_N>, ...}

For each variable (found in the lexicographically first examined file), it collects the corresponding values found in all the stat files in <stats_dir>, and generates a diagram file (named \`<var_name>.${c_diagram_file_extension}\`)

After processing, the first diagram is opened (via \`xdg-open\`).

If more directories are passed (\"comparison\" mode), one diagram per variable will be produced, which will contain one line for each directory.
In this mode, the directories must have files with the same name, and each file must contain the same variables.

If a start index is passed, the number of values preceding it are ignored.

The default stat files glob pattern is \`$c_default_log_files_glob\`.

If the \`--only\` option is passed, only the variables specified are selected.

The \`--single-diagram\` option causes a single diagram to be generated (\`${c_single_diagram_basename}.${c_diagram_file_data_extension}\`), instead of one for each variable. This option requires \`--only\`, and only one \`<stats_dir>\`.

The \`--aggregate\` functionality applies the given function to the values of each variable, and stores them as \`$c_aggregates_file_prefix<aggregate_name>.$c_aggregates_file_extension\` in the destination directory.

The currently supported functions are: $(IFS=,; echo "${!c_aggregates[*]}").

The input file format is the same generated by \`mysql -B\` (used by \`mysql_collect_stats\`): on each line, one pair \`<variable_name> <variable_value>\`.

Variables with non-numeric values are ignored.

The program \`plot_diagram\` (from openscripts) needs to be in \$PATH.
"

v_start_index=0
v_var_names_filter=
v_single_diagram=
v_aggregate_name=
v_aggregate_code=
v_log_files_glob=$c_default_log_files_glob
v_reference_stat_files=
v_reference_var_names=
v_stat_directories=
v_destination_dir=$(mktemp -d -t 'mysql_diagrams.XXXXXXXX')

v_debug=
v_test_data=

################################################################################
# HELPERS
################################################################################

# Input:    "<directory>"
# Output:   stdout=files (full path), NULL-separated
# Requires: $v_log_files_glob
#
function find_log_files {
  if [[ -d "$1" ]]; then
    find "$1" -maxdepth 1 -name "$v_log_files_glob" -type f -print0 | sort -z
  fi
}

# IMPORTANT: This filters out variables that don't follow the format:
#
#     <start_of_line><variable_name><whitespaces><numeric_value><end_of_line>
#
# Input:    "<pattern> <file1>{ <fileN>}"
# Output:   stdout=files, NULL-separated
# Requires: $v_var_names_filter
#
function find_var_names {
  if [[ $# -ge 2 ]]; then
    grep -oP "^$1(?=\s+\d+(\.\d+)?$)" "${@:2}" | tr "\n" "\0"
  fi
}

# Input:    "<pattern> <file1>{ <fileN>}"
# Output:   stdout=values, NULL-separated
#
function find_var_values {
  # This is nice, but doesn't do: `grep -oP "^(?<=$1\s+)\S+" "${@:2}"` because grep/perl don't
  # support variable length lookbehind.
  #
  var_name=$1 perl -ne 'print "$1\0" if /^$ENV{var_name}\s+(\d+(\.\d+)?)/' "${@:2}"
}

################################################################################
# MAIN STAGES
################################################################################

# The options `--debug` and `--test-data` are not in the official help.
#
function decode_cmdline_parameters {
  eval set -- "$(getopt --options hg:a:s:o:1d: --long help,log-files-glob:,aggregate:,start:,only:,single-diagram,destination:,debug,test-data -- "$@")"

  while true; do
    case "$1" in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -g|--log-files-glob)
        v_log_files_glob=$2
        shift 2 ;;
      -a|--aggregate)
        v_aggregate_name=$2
        shift 2 ;;
      -s|--start)
        v_start_index=$2
        shift 2 ;;
      -o|--only)
        v_var_names_filter=$2
        shift 2 ;;
      -1|--single-diagram)
        v_single_diagram=1
        shift ;;
      -d|--destination)
        v_destination_dir=$2
        shift 2 ;;
      --debug)
        v_debug=1
        shift ;;
      --test-data)
        v_test_data=1
        shift ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -lt 1 ]]; then
    echo "$c_help"

    exit 1
  elif [[ "$v_single_diagram" == "1" ]] && [[ -z "$v_var_names_filter" || $# -ne 1 ]]; then
    echo "$c_help"

    exit 1
  fi

  v_reference_stats_directory=$1
  v_stat_directories=("$@")
}

# Preparing the variables and checking are two distinct stages, but at the same time, they depend
# on each other.
# We solve this problem by setting the variables in an unchecked fashion, and performing the checks
# after.
#
function prepare_variables {
  set +o nounset

  mapfile -d '' v_reference_stat_files < <(find_log_files "$v_reference_stats_directory")

  if [[ -v c_aggregates["$v_aggregate_name"] ]]; then
    v_aggregate_code=${c_aggregates["$v_aggregate_name"]}
  fi

  if [[ -z "$v_var_names_filter" ]]; then
    v_var_names_filter='\w+'
  else
    v_var_names_filter=${v_var_names_filter//,/|}
  fi

  mapfile -d '' v_reference_var_names < <(find_var_names "$v_var_names_filter" "${v_reference_stat_files[0]}")

  set -o nounset
}

function create_test_data {
  rm -rf /tmp/stats{,2}
  mkdir -p /tmp/stats{,2}

  printf "aaa 1\nbbb 2\nccc 30" > "/tmp/stats/stats_z 0.log"
  printf "aaa 2\nbbb 2\nccc 50" > "/tmp/stats/stats_z 1.log"
  printf "aaa 5\nbbb 6\nccc 10" > "/tmp/stats/stats_z 2.log"

  printf "aaa 2\nbbb 4\nccc 60" > "/tmp/stats2/stats_z 0.log"
  printf "aaa 4\nbbb 4\nccc 90" > "/tmp/stats2/stats_z 1.log"
  printf "aaa 8\nbbb 9\nccc 20" > "/tmp/stats2/stats_z 2.log"
}

function enable_debug {
  exec 5> "$(dirname "$(mktemp)")/$(basename "$0").log"
  BASH_XTRACEFD="5"
  set -x
}

function check_requirements {
  [[ "$v_debug" == "1" ]] && echo "Checking data ..." || true

  if [[ ! -x $(command -v plot_diagram) ]]; then
    echo 'The program `plot_diagram` (from openscripts) needs to be in $PATH'.
    exit 1
  elif [[ -n "$v_aggregate_name" ]] && [[ ! -v c_aggregates["$v_aggregate_name"] ]]; then
    echo "Aggregate $v_aggregate_name not supported!"
    exit 1
  elif [[ ${#v_reference_var_names[@]} -eq 0 ]]; then
    echo "No variables found in the reference file!"
    exit 1
  fi

  [[ "$v_debug" == "1" ]] && echo "- directories consistency ..." || true

  for stats_directory in "${v_stat_directories[@]}"; do
    if [[ ! -d "$stats_directory" ]]; then
      echo "The directory '$stats_directory' is not a directory, or it doesn't exist."
      exit 1
    fi

    mapfile -d '' stat_files < <(find_log_files "$stats_directory")

    if [[ ${#stat_files[@]} -ne ${#v_reference_stat_files[@]} ]]; then
      echo "The number of files in '$stats_directory' doesn't match the reference directory."
      exit 1
    fi

    for (( i = 0 ; i < ${#stat_files[@]}; i++ )); do
      if [[ "$(basename "${stat_files[i]}")" != "$(basename "${v_reference_stat_files[i]}")" ]]; then
        echo "Unexpected file '${stat_files[i]}' found; $(basename "${v_reference_stat_files[i]}") expected."
        exit 1
      fi
    done

    # Check the vars.

    for var_name in "${v_reference_var_names[@]}"; do
      mapfile -d '' var_occurrences < <(find_var_names "$var_name" "${stat_files[@]}")

      if [[ ${#var_occurrences[@]} -ne ${#v_reference_stat_files[@]} ]]; then
        echo "The variable $var_name hasn't been found in all the files in $stats_directory!"
        exit 1
      fi

      unset var_occurrences
    done

    unset stat_files
  done
}

# Prepare the data file, with the matrix format expected by GNU Plot.
#
# The source structure is (for a single variable):
#
#           stat1 ... statN
#     dir1   val  ───  val   ──> axis: time
#     ...     |
#     dirN   val  ...  val
#             |
#             └> axis: different set
#
# Each `stat<N>` is the data corresponding to a point in time.
#
# So, in the outer loop, we iterate horizontally, over the stat files (that is, over time), and in
# the inner loop, we iterate vertically, over the directories (multiple values for a given point in
# time).
#
# The result is:
#
#     <var_name>.txt:
#       val_dir1_stat1 ... val_dirN_stat1
#       val_dir1_statN ... vak_dirN_statN
#
# This version is optimized; instead of adding an extra loop with the variables, each file is read
# fully, and the variable names and values are stored in a hash, then appended to the files
# corresponding to each variable.
#
function prepare_multi_dir_datafiles {
  [[ "$v_debug" == "1" ]] && echo -n "Preparing merged datafiles: " || true

  mkdir -p "$v_destination_dir"

  # Format: [var_name]="single line of stats"
  #
  declare -A var_stat_lines

  for var_name in "${v_reference_var_names[@]}"; do
    var_stat_lines["$var_name"]=
  done

  for reference_stat_file in "${v_reference_stat_files[@]:$v_start_index}"; do
    [[ "$v_debug" == "1" ]] && echo -n "." || true

    # Computing the instances, rather than `find`ing them, gives a non-negligible boost.
    #
    local stat_file_instances=()

    for stat_directory in "${v_stat_directories[@]}"; do
      stat_file_instances+=("$stat_directory/$(basename "$reference_stat_file")")
    done

    # Collect all the values of the variables across the instances of the stat file reference
    # (that is, across directories).

    while read -r line || [[ -n "$line" ]]; do
      local var_name=${line% *}
      local var_value=${line#* }

      if [[ -v var_stat_lines["$var_name"] ]]; then
        [[ -n "${var_stat_lines["$var_name"]}" ]] && var_stat_lines["$var_name"]+=' ' || true
        var_stat_lines["$var_name"]+=$var_value
      fi
    done <<< "$(perl -lne 'print "$1 $2" if /^(\w+)\s+(\d+(\.\d+)?)$/' "${stat_file_instances[@]}")"

    # Output the lines of each variable in the variable (merged) output file.

    for var_name in "${v_reference_var_names[@]}"; do
      echo "${var_stat_lines["$var_name"]}" >> "$v_destination_dir/${var_name}.${c_diagram_file_data_extension}"

      var_stat_lines["$var_name"]=
    done

    [[ "$v_debug" == "1" ]] && echo -n "." || true
  done

  [[ "$v_debug" == "1" ]] && echo || true
}

# Although the structure is very similar to the multi-dir one, it's different in the various
# stages, which would require conditionals, leading to quite ugly code.
#
function prepare_single_diagram_datafiles {
  [[ "$v_debug" == "1" ]] && echo -n "Preparing merged datafiles: " || true

  mkdir -p "$v_destination_dir"

  # There isn't a clean way to test if an array contains an entry, so we turn this one into an
  # associative array.
  #
  declare -A reference_var_names

  for var_name in "${v_reference_var_names[@]}"; do
    reference_var_names["$var_name"]=
  done

  for reference_stat_file in "${v_reference_stat_files[@]:$v_start_index}"; do
    [[ "$v_debug" == "1" ]] && echo -n "." || true

    # In this mode, only one directory is allowed, so we don't need to collect the stat file
    # instances.

    local vars_line=

    # Collect all the values in the stat file.

    while read -r line || [[ -n "$line" ]]; do
      local var_name=${line% *}
      local var_value=${line#* }

      if [[ -v reference_var_names["$var_name"] ]]; then
        [[ -n "$vars_line" ]] && vars_line+=' ' || true
        vars_line+=$var_value
      fi
    done <<< "$(perl -lne 'print "$1 $2" if /^(\w+)\s+(\d+(\.\d+)?)$/' "$reference_stat_file")"

    # Output the lines in the (merged) output file.

    echo "$vars_line" >> "$v_destination_dir/${c_single_diagram_basename}.${c_diagram_file_data_extension}"

    [[ "$v_debug" == "1" ]] && echo -n "." || true
  done

  [[ "$v_debug" == "1" ]] && echo || true
}

function create_diagrams {
  [[ "$v_debug" == "1" ]] && echo -n 'Creating diagrams: ' || true

  # Minimal gnuplot command to avoid using `plot_diagram` (variables need to be substituted):
  #
  #     set terminal pngcairo size 1600,900
  #     set output '/tmp/mysql_status_diagrams/${var_name}.${c_diagram_file_extension}'
  #     plot '/dev/stdin' with linespoints title '$var_name'
  #
  # However, that works for the very basic case of one line.
  #
  for var_name in "${v_reference_var_names[@]}"; do
    local var_data_file=$v_destination_dir/${var_name}.${c_diagram_file_data_extension}

    local titles=()

    if [[ ${#v_stat_directories[@]} -eq 1 ]]; then
      titles+=("$var_name")
    else
      for stat_directory in "${v_stat_directories[@]}"; do
        titles+=("$(basename "$stat_directory".$var_name)")
      done
    fi

    plot_diagram -n -t "$(IFS=,; echo "${titles[*]}")" -o "$v_destination_dir/${var_name}.${c_diagram_file_extension}" "$var_data_file" 2> /dev/null

    [[ "$v_debug" == "1" ]] && echo -n "." || true
  done

  echo
}

function create_single_diagram {
  [[ "$v_debug" == "1" ]] && echo 'Creating single diagram ...' || true

  local var_data_file=$v_destination_dir/${c_single_diagram_basename}.${c_diagram_file_data_extension}
  local diagram_file=$v_destination_dir/${c_single_diagram_basename}.${c_diagram_file_extension}

  plot_diagram -a -n -t "$(IFS=,; echo "${v_reference_var_names[*]}")" -o "$diagram_file" "$var_data_file" 2> /dev/null
}

# Optimized similarly to prepare_multi_dir_datafiles().
#
function compute_aggregates {
  for stats_directory in "${v_stat_directories[@]}"; do
    # Format: [var_name]="<val1>\n<valN>..."
    #
    declare -A var_stat_values

    for var_name in "${v_reference_var_names[@]}"; do
      var_stat_values["$var_name"]=
    done

    for reference_stat_file in "${v_reference_stat_files[@]:$v_start_index}"; do
      # Computing the instances rather than `find`ing them, gives a non-negligible boost.
      local stat_file_instances=()

      for stat_directory in "${v_stat_directories[@]}"; do
        stat_file_instances+=("$stat_directory/$(basename "$reference_stat_file")")
      done

      while read -r line || [[ -n "$line" ]]; do
        local var_name=${line% *}
        local var_value=${line#* }

        if [[ -v var_stat_values["$var_name"] ]]; then
          [[ -n "${var_stat_values["$var_name"]}" ]] && var_stat_values["$var_name"]+=' ' || true
          var_stat_values["$var_name"]+=${var_value}$'\n'
        fi
      done < "${stat_file_instances[@]}"
    done

    for var_name in "${v_reference_var_names[@]}"; do
      local var_stat_aggregate_output=

      if [[ ${#v_stat_directories[@]} -gt 1 ]]; then
        var_stat_aggregate_output="$(basename "$stats_directory")."
      fi

      var_stat_aggregate_output+="$var_name $v_aggregate_name: $(echo -n "${var_stat_values["$var_name"]}" | perl -ane "$v_aggregate_code")"

      echo "$var_stat_aggregate_output" >> "$v_destination_dir/${c_aggregates_file_prefix}${v_aggregate_name}.${c_aggregates_file_extension}"
      [[ "$v_debug" == "1" ]] && echo "$var_stat_aggregate_output" || true

      var_stat_values["$var_name"]=
    done
  done
}

function open_first_diagram {
  local first_diagram_file_found
  first_diagram_file_found=$(find "$v_destination_dir" -maxdepth 1 -type f -name "*.${c_diagram_file_extension}" -print0 | sort -z | head -n 1 -z | tr -d '\0')

  if [[ -z "$first_diagram_file_found" ]]; then
    echo "No diagram files found"
    exit 1
  else
    xdg-open "$first_diagram_file_found"
  fi
}

################################################################################
# ENTRY POINT
################################################################################

decode_cmdline_parameters "${@}"
if [[ "$v_test_data" == "1" ]]; then create_test_data; fi
if [[ "$v_debug" == "1" ]]; then enable_debug; fi
prepare_variables
check_requirements
if [[ "$v_single_diagram" == "1" ]]; then
  prepare_single_diagram_datafiles
  create_single_diagram
else
  prepare_multi_dir_datafiles
  create_diagrams
fi
if [[ "$v_aggregate_code" != "" ]]; then compute_aggregates; fi
open_first_diagram
