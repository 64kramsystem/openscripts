#!/bin/bash

c_diagram_file_prefix="var_"
c_diagram_file_extension="png"
c_help="Usage: $(basename "$0") [(-s|--start <base_0_index>)] <stat_file1> <stat_file2> <...>

For each variable (found in the first examined file), it collects the correponding values found in all the stats files, and generates a diagram file (named \`${c_diagram_file_prefix}*.${c_diagram_file_extension}\`)

After processing, the first diagram is opened (via \`xdg-open\`).

If a start index is passed, the number of values preceding it are ignored.

The input file format is the same generated by \`mysql -B\` (used by \`mysql_collect_stats\`): on each line, one pair \`<variable_name> <variable_value>\`.

Any diagram file found in the directory is deleted.

Variables with non-numeric values are ignored.
"

function decode_cmdline_parameters {
  v_start_index=0

  eval set -- "$(getopt --options hs: --long help,start: -- "$@")"

  while true; do
    case "$1" in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -s|--start)
        v_start_index=$2
        shift 2 ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -lt 1 ]]; then
    echo "$c_help"

    exit 1
  fi

  v_all_files=("$@")
}

function prepare_variables {
  v_first_stats_file="${v_all_files[0]}"
  v_files_directory=$(dirname "$v_first_stats_file")
  v_var_names="$(awk '{print $1}' "$v_first_stats_file")"
}

function purge_existing_diagram_files {
  rm -f "$v_files_directory/$c_diagram_file_prefix"*."$c_diagram_file_extension"
}

function create_diagrams {
  # Assume that the variable names and values are one token each, and that each file contains the same
  # status variables as the first file.
  #
  # Minimal gnuplot command to avoid using `plot_diagram` (variables need to be substituted):
  #
  #     set terminal pngcairo size 1600,900
  #     set output '/tmp/mysql_status_diagrams/${var_name}.${c_diagram_file_extension}'
  #     plot '/dev/stdin' with linespoints title '$var_name'
  #
  for var_name in $v_var_names; do
    echo -n "$var_name: "

    # Skip the variable (prints nothing) if the value is not a number.
    #
    values=$(perl -lne "/^${var_name}\s+(\d+(\.\d+)?)\$/ && print \$1" "${v_all_files[@]}" | tail -n +"$((v_start_index + 1))")

    if [[ "$values" != "" ]]; then
      echo $values
      echo "$values" | plot_diagram -t "$var_name" -o "$v_files_directory/${c_diagram_file_prefix}${var_name}.${c_diagram_file_extension}" 2> /dev/null
    else
      echo "skipping..."
    fi
  done
}

function open_first_diagram {
  find "$v_files_directory" -type f -name "${c_diagram_file_prefix}*.${c_diagram_file_extension}" -exec xdg-open {} \; -quit
}

decode_cmdline_parameters "${@}"
prepare_variables
purge_existing_diagram_files
create_diagrams
open_first_diagram
