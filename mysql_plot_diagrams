#!/bin/bash

if [[ $# -lt 1 || "$1" == "--help" || "$1" == "-h" ]]; then
  echo 'Usage: $(basename "$0") <stat_file1> <stat_file2> <...>'
  echo
  echo 'Creates one diagram for each value included in all the stat files passed.'
  echo
  echo 'The input file format is the same generated by `mysql_collect_stats`: on each line, one pair `<variable_name> <variable_value>`.'
  echo 'Variables with non-numeric values are ignored.'

  exit 1
fi

first_stats_file="$1"
var_names="$(awk '{print $1}' "$first_stats_file")"
diagram_files_prefix="$(dirname "$first_stats_file")/var_"

rm -f "$diagram_files_prefix"*

# Assume that the variable names and values are one token each, and that each file contains the same
# status variables as the first file.
#
# Minimal gnuplot command to avoid using gnuplot:
#
#     set terminal pngcairo size 1600,900
#     set output '/tmp/mysql_status_diagrams/Innodb_undo_tablespaces_total.png'
#     plot '/dev/stdin'  with linespoints  title 'Innodb_undo_tablespaces_total'
#
for var in $var_names; do
  echo -n "$var: "

  # Skip the variable if the value is not a number.
  #
  values="$(var="$var" perl -lne '/^$ENV{var}\s+(\d+(\.\d+)?)$/ && print $1' "$@")"

  if [[ $values != "" ]]; then
    echo "$values" | tee | plot_diagram -t "$var" -o "$diagram_files_prefix$var.png" 2> /dev/null
  else
    echo "skipping..."
  fi
done

# Open the first image.
#
find "$(dirname "$diagram_files_prefix")" -type f -name "$(basename "$diagram_files_prefix")*" -exec xdg-open {} \; -quit
