#!/bin/bash

set -o nounset
set -o errexit
set -o pipefail

c_log_files_glob="*.log"
c_diagram_file_prefix="var_"
c_diagram_file_extension="png"

# Executed as `perl -lane` code, with the values sent to stdin; the operations must print the result.
#
declare -A c_aggregates=(
  [average]='$total += $F[0]; END { print $total / $. }'
  [total]='$total += $F[0]; END { print $total }'
)

c_help="Usage: $(basename "$0") [(-s|--start <base_0_index>)] [(-o|--only) var_name{,var_name...}] [(-v|--verbose)] [(-a|--aggregate) <function>] <stats_dir>

For each variable (found in the lexicographically first examined file), it collects the correponding values found in all the stat files ($c_log_files_glob) in <stats_dir>, and generates a diagram file (named \`${c_diagram_file_prefix}*.${c_diagram_file_extension}\`)

After processing, the first diagram is opened (via \`xdg-open\`).

If a start index is passed, the number of values preceding it are ignored.

If the \`--only\` option is passed, only the variables specified are selected.

The \`--aggregate\` functionality applies the given function to the values of each variable, and prints them before displaying the diagrams.

The currently supported fucntions are: $(IFS=,; echo "${!c_aggregates[*]}").

The input file format is the same generated by \`mysql -B\` (used by \`mysql_collect_stats\`): on each line, one pair \`<variable_name> <variable_value>\`.

Any diagram file found in the directory is deleted.

Variables with non-numeric values are ignored.

The program \`plot_diagram\` (from openscripts) needs to be in \$PATH.
"

function decode_cmdline_parameters {
  v_start_index=0
  v_var_names_filter=
  v_verbose=
  v_aggregate_name=

  eval set -- "$(getopt --options ha:s:o:v --long help,aggregate:,start:,only:,verbose -- "$@")"

  while true; do
    case "$1" in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -a|--aggregate)
        v_aggregate_name=$2
        shift 2 ;;
      -s|--start)
        v_start_index=$2
        shift 2 ;;
      -o|--only)
        v_var_names_filter=$2
        shift 2 ;;
      -v|--verbose)
        v_verbose=1
        shift ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -ne 1 ]]; then
    echo "$c_help"

    exit 1
  fi

  v_stats_directory=$1
}

function check_requirements {
  if [[ ! -x $(command -v plot_diagram) ]]; then
    echo 'The program `plot_diagram` (from openscripts) needs to be in $PATH'.
    exit 1
  elif [[ ! -d "$v_stats_directory" ]]; then
    echo "The parameter passed is not a directory, or it doesn't exist."
    exit 1
  elif [[ $(find "$v_stats_directory" -maxdepth 1 -type f | wc -l) -eq 0 ]]; then
    echo "No files found in the specified directory."
    exit 1
  fi
}

function prepare_variables {
  mapfile -d '' v_stat_files < <(find "$v_stats_directory" -maxdepth 1 -type f -print0 | sort -z)

  v_first_stats_file="${v_stat_files[0]}"
  v_files_directory=$(dirname "$v_first_stats_file")

  if [[ "$v_aggregate_name" != "" ]]; then
    if [[ -v c_aggregates["$v_aggregate_name"] ]]; then
      v_aggregate_code=${c_aggregates["$v_aggregate_name"]}
    else
      echo "Aggregate $v_aggregate_name not supported!"
      exit 1
    fi
  else
    v_aggregate_code=
  fi

  if [[ "$v_var_names_filter" == "" ]]; then
    v_var_names_filter='.*'
  else
    v_var_names_filter=${v_var_names_filter//,/|}
  fi

  v_var_names="$(awk '{print $1}' "$v_first_stats_file" | grep -P "^${v_var_names_filter}\$")"
}

function purge_existing_diagram_files {
  rm -f "$v_files_directory/$c_diagram_file_prefix"*."$c_diagram_file_extension"
}

function create_diagrams {
  # Assume that the variable names and values are one token each, and that each file contains the same
  # status variables as the first file.
  #
  # Minimal gnuplot command to avoid using `plot_diagram` (variables need to be substituted):
  #
  #     set terminal pngcairo size 1600,900
  #     set output '/tmp/mysql_status_diagrams/${var_name}.${c_diagram_file_extension}'
  #     plot '/dev/stdin' with linespoints title '$var_name'
  #
  for var_name in $v_var_names; do
    [[ "$v_verbose" == "1" ]] && echo -n "$var_name: " || true

    # Skip the variable (prints nothing) if the value is not a number.
    #
    values=$(perl -lne "/^${var_name}\s+(\d+(\.\d+)?)\$/ && print \$1" "${v_stat_files[@]}" | tail -n +"$((v_start_index + 1))")

    if [[ "$values" != "" ]]; then
      # shellcheck disable=SC2086
      [[ "$v_verbose" == "1" ]] && echo $values || true
      echo "$values" | plot_diagram -t "$var_name" -o "$v_files_directory/${c_diagram_file_prefix}${var_name}.${c_diagram_file_extension}" 2> /dev/null
    else
      [[ "$v_verbose" == "1" ]] && echo "skipping..." || true
    fi

    if [[ "$v_aggregate_code" != "" ]]; then
      local aggregate_result
      aggregate_result=$(echo "$values" | perl -lane "$v_aggregate_code")
      echo "$var_name $v_aggregate_name: $aggregate_result"
    fi
  done
}

function open_first_diagram {
  find "$v_files_directory" -type f -name "${c_diagram_file_prefix}*.${c_diagram_file_extension}" -exec xdg-open {} \; -quit
}

decode_cmdline_parameters "${@}"
check_requirements
prepare_variables
purge_existing_diagram_files
create_diagrams
open_first_diagram
