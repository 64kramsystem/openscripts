#!/bin/bash

set -o errexit

if [[ "$#" != 0 ]]; then
  echo 'Usage: git_purge_empty_branches'
  echo
  echo "Delete all the branches (local, and their remote tracked) that haven't any commits that aren't in master."
  echo "Can be run from any branch, but requires a clean tree."
  echo
  echo "Before performing the purge, the repository is synced, and master is rebased."
  echo
  echo $'It won\'t delete any branch named `master` or `deployment`'

  exit 0
fi

if [[ $(git status | grep "nothing to commit, working tree clean") == "" ]]; then
  echo 'Please commit/stash any change before proceeding!'
  exit 1
fi

# Fetch all, so that this script can be generally used for syncing the repo.
git fetch --all --tags --prune
echo

saved_location=$(git rev-parse --abbrev-ref HEAD)

if [[ "$saved_location" != "master" ]]; then
  # Keep the message consistent with the one when checkout back to this branch (see script last
  # operation).
  git checkout master 2>&1 | head -n 1
  echo
fi

git rebase
echo

for branch in $(git branch | cut -c 3- | egrep -v '^(master|deployment)$'); do
  if [[ ! $(git cherry master $branch | grep '^+') ]]; then
    git branch -D $branch
    echo

    if git branch -r | grep "origin/$branch\$"; then
      git push origin :$branch
      echo
    fi
  fi
done

if [[ "$saved_location" != "master" ]]; then
  # The output is very noisy for non-named branches.
  git checkout - 2>&1 | head -n 1
  echo
fi
