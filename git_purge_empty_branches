#!/bin/bash

set -o errexit

configuration_file="$HOME/.$(basename "$0")"

if [[ "$#" != 0 ]]; then
  echo "Usage: $(basename "$0")"
  echo
  echo "Delete all the branches (local, and their remote tracked) that haven't any commits that aren't in master."
  echo "Can be run from any branch, but requires a clean tree."
  echo
  echo "Before performing the purge, the repository is synced, and master is rebased."
  echo
  echo "A branch is never deleted if it's called "'`master'" or if it's included in the configfile ($configuration_file)"
  echo
  echo "The configfile format is composed of multiple lines in the format "'`<repo_dirname>:<branches_regexp>`'"."
  echo "Empty lines are ignored."
  echo
  echo "Example configfile:"
  echo
  echo "  qemu-pinning:^.*-pinning$"
  echo "  myrepo:^(branch1|branch2)$"

  exit 0
fi

if [[ $(git status | grep "nothing to commit, working tree clean") == "" ]]; then
  echo 'Please commit/stash any change before proceeding!'
  exit 1
fi

# LOAD PROTECTED BRANCHES ########################

declare -A protected_branches

# Make sure the file exists.
#
touch "$configuration_file"

while IFS='= ' read -r key value || [ -n "$key" ]; do
  if [[ "$key" != "" ]]; then
    protected_branches["$key"]="$value"
  fi
done < "$configuration_file"

# CHECKOUT AND REBASE MASTER #####################

saved_location=$(git rev-parse --abbrev-ref HEAD)

if [[ "$saved_location" != "master" ]]; then
  # Keep the message consistent with the one when checkout back to this branch (see script last
  # operation).
  git checkout master 2>&1 | head -n 1
  echo
fi

git rebase
echo

# SYNC REPOSITORY ################################

git fetch --all --tags --prune
echo

# DELETE "EMPTY" BRANCHES ########################

repo_dirname="$(basename "$(readlink -f .)")"
protected_branches_pattern="${protected_branches["$repo_dirname"]}"

# If no protected branches are specified, use a phony pattern (will match empty branch names, which are not possible).
protected_branches_pattern="${protected_branches_pattern:-^$}"

for branch in $(git branch | cut -c 3- | egrep -v '^master$' | egrep -v "$protected_branches_pattern" ); do
  if [[ ! $(git cherry master $branch | grep '^+') ]]; then
    git branch -D $branch
    echo

    if git branch -r | grep "origin/$branch\$"; then
      git push origin :$branch
      echo
    fi
  fi
done

# RETURN TO STARTING BRANCH ######################

if [[ "$saved_location" != "master" && $(git cat-file -t "$saved_location" 2> /dev/null) ]]; then
  # The output is very noisy for non-named branches.
  git checkout - 2>&1 | head -n 1
  echo
fi
