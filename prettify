#!/usr/bin/env ruby

require 'simple_scripting/argv'

require 'fileutils'

require 'json'
require 'rexml/document'
require 'nokogiri'
require 'yaml'

class Processor

  SUPPORTED_FORMATS = %w(json xml html yml yaml)

  def process(filenames, backup: false, format: nil)
    Array(filenames).each do |filename|
      puts "Prettifying #{filename}..."

      content = IO.read(filename)

      prettified_content = prettify(filename, content, format: format)

      FileUtils.cp(filename, "#{filename}.bak") if backup

      IO.write(filename, prettified_content)
    end
  end

  private

  def prettify(filename, content, format: nil)
    format ||= File.basename(filename)[/\.(\w+)\Z/, 1]&.downcase || ""

    raise "Unsupported file type/extension: #{format}" if !SUPPORTED_FORMATS.include?(format)

    prettifier_class = Object.const_get("#{format.capitalize}Prettifier")

    prettifier_class.new.prettify(content)
  end

end

class JsonPrettifier

  def prettify(content)
    JSON.pretty_generate(JSON.parse(content))
  end

end

class XmlPrettifier

  def prettify(content)
    prettified_content = ''

    root = REXML::Document.new(content)

    xml_formatter = REXML::Formatters::Pretty.new
    xml_formatter.compact = true
    xml_formatter.write(root, prettified_content)

    prettified_content
  end

end

class HtmlPrettifier

  def prettify(content)
    Nokogiri::XML(content,&:noblanks).to_s
  end

end

class YamlPrettifier

  def prettify(content)
    YAML.load(content).to_yaml
  end

end

YmlPrettifier = YamlPrettifier

if $PROGRAM_NAME == __FILE__
  params = SimpleScripting::Argv.decode(
    ['-b', '--backup',        'Backup original file, appending `.bak`'],
    ['-f', '--format FORMAT', "Forces the format; valid values: #{Processor::SUPPORTED_FORMATS.join(', ')}"],
    '*filenames',
    long_help: <<~HELP
      Prettifies #{Processor::SUPPORTED_FORMATS.join('/')} files (relies on the file extension for detecting the format).

      Watch out! YAML comments are stripped.
    HELP
  ) || exit

  filenames = params.delete(:filenames)

  Processor.new.process(filenames, **params)
end
