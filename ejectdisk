#!/bin/bash

set -o errexit

c_help="Usage: $(basename "$0") [-n|--no-poweroff] [<block_device>]

Unmounts and powers off a disk, like the typical desktop environment functionality.
The prefix \`/dev/\` is automatically added, if not present.

If no arguments are passed, all the usb storage devices are ejected.

If the \`no-poweroff\` option is passed, the partitions are unmounted, but the disk is not powered off."
v_option_device=
v_option_no_poweroff=

declare -a v_devices

function decode_commandline_arguments {
  eval set -- "$(getopt --options hn --long help,no-poweroff -- "$@")"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0
        ;;
      -n|--no-poweroff)
        v_option_no_poweroff=1
        shift
        ;;
      --)
        shift
        break
        ;;
    esac
  done

  if [[ $# -gt 1 ]]; then
    echo "$c_help"
    exit 1;
  elif [[ $# == 0 ]]; then
    v_option_device=
  else
    v_option_device="$1"
  fi
}

function set_devices {
  if [[ "$v_option_device" == "" ]]; then
    find_usb_storage_devices
  elif [[ $v_option_device =~ ^/dev/ ]]; then
    v_devices+=("$v_option_device")
  else
    v_devices+=("/dev/$v_option_device")
  fi
}

function find_usb_storage_devices {
  for device in /sys/block/*; do
    local usb_storages_info device_name

    usb_storages_info=$(udevadm info --query=property --path="$device")

    if echo "$usb_storages_info" | grep -q ^ID_BUS=usb; then
      device_name=$(echo "$usb_storages_info" | perl -ne 'print $1 if /^DEVNAME=(.*)/')
      v_devices+=("$device_name")
    fi
  done
}

function unmount_device_partitions() {
  # LUKS encrypted partitions need a different treatment.
  #
  local device_tree

  # Sample output (unprocessed):
  #
  #   NAME                                          TYPE  MOUNTPOINT
  #   sde                                           disk
  #   └─sde1                                        part
  #     └─luks-00000000-0000-0000-0000-000000000000 crypt /path/to/mountpoint
  #
  device_tree=$(lsblk -n -o NAME,TYPE,MOUNTPOINT "$device" || true)

  # Umount the encrypted partition(s).
  # The second `\S+` ensures that there is a mountpoint.
  #
  for luks_device in $(echo "$device_tree" | perl -lne 'print $1 if /([\w-]+) crypt \S+$/'); do
    udisksctl unmount -b "/dev/mapper/$luks_device"
  done

  # Lock the LUKS device.
  #
  for luks_device in $(echo "$device_tree" | perl -lne 'print $1 if /(\w+) +part/'); do
    # It's not clear how to check, without sudo permissions, if a LUKS device is locked, so this is
    # based on empirical tests: on unlocked, the entry below has a full path, while on locked ones,
    # it has only the slash.

    if udisksctl info -b "/dev/$luks_device" | grep -qP "CleartextDevice: +'/\S+'"; then
      udisksctl lock -b "/dev/$luks_device"
    fi
  done

  # Cheap way of finding the mounted partitions of a given device.
  #
  for partition in $(mount | grep "^$device" | awk '{print $1}'); do
    udisksctl unmount -b "$partition"
  done
}

function power_off_device() {
  if [[ -e "$device" ]]; then
    udisksctl power-off -b "$device"
    echo "Device $device powered off."
  else
    # Simplified message, based on reasonable assumption (see comment below).
    echo "Device $device already powered off."
  fi
}

decode_commandline_arguments "$@"

set_devices

# Some peripherals may expose multiple devices (eg. card readers). In this case, when
# we power off the first device, the other ones will be implicitly powered off too.
# This is possibly ok (unmounting may be implicitly performed), however, for cleanness,
# first we umount all, then we (conditionally) power off.
#
for device in "${v_devices[@]}"; do
  unmount_device_partitions
done

if [[ "$v_option_no_poweroff" != "1" ]]; then
  for device in "${v_devices[@]}"; do
    power_off_device
  done
fi
