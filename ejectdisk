#!/bin/bash

set -o errexit

c_help="Usage: $(basename "$0") [<block_device>]

Unmounts and powers off a disk, like the typical desktop environment functionality.
The prefix \`/dev/\` is automatically added, if not present.

If no arguments are passed, all the usb storage devices are ejected."
v_option_device=

declare -a v_devices

function decode_commandline_arguments {
  eval set -- "$(getopt --options h --long help -- "$@")"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0
        ;;
      --)
        shift
        break
        ;;
    esac
  done

  if [[ $# -gt 1 ]]; then
    echo "$c_help"
    exit 1;
  elif [[ $# == 0 ]]; then
    v_option_device=
  else
    v_option_device="$1"
  fi
}

function set_devices {
  if [[ "$v_option_device" == "" ]]; then
    find_usb_storage_devices
  elif [[ $v_option_device =~ ^/dev/ ]]; then
    v_devices+=("$v_option_device")
  else
    v_devices+=("/dev/$v_option_device")
  fi
}

function find_usb_storage_devices {
  for device in /sys/block/*; do
    local usb_storages_info=$(udevadm info --query=property --path=$device)
    local device_name

    if echo "$usb_storages_info" | grep -q ^ID_BUS=usb; then
      device_name=$(echo "$usb_storages_info" | grep ^DEVNAME= | perl -pe 's/DEVNAME=//')
      v_devices+=("$device_name")
    fi
  done
}

function unmount_device_partitions() {
  # Cheap way of finding the mounted partitions of a given device.
  for partition in $(mount | grep "^$device" | awk '{print $1}'); do
    udisksctl unmount -b "$partition"
  done
}

function power_off_device() {
  if [[ -e "$device" ]]; then
    udisksctl power-off -b "$device"
    echo "Device $device powered off."
  else
    # Simplified message, based on reasonable assumption (see comment below).
    echo "Device $device already powered off."
  fi
}

decode_commandline_arguments "$@"

set_devices

# Some peripherals may expose multiple devices (eg. card readers). In this case, when
# we power off the first device, the other ones will be implicitly powered off too.
# This is possibly ok (unmounting may be implicitly performed), however, for cleanness,
# first we umount all, then we (conditionally) power off.
#
for device in "${v_devices[@]}"; do
  unmount_device_partitions
done

for device in "${v_devices[@]}"; do
  power_off_device
done
