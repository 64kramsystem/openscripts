#!/bin/bash

set -o errexit
set -o nounset

# It's not clear if in theory, files could be analyzed individually for track gain, then the audio
# gain to be applied without recomputing, but it doesn't work based on testing:
#
#     for f in *.m4a; do aacgain -s r "$f"; done
#     aacgain -k -a *.m4a

# shellcheck disable=SC2016
help="Usage: $(basename "$0") [-d|--destination <dir>] [-q|--quality <quality>] [-r|--remove] <input1> {<inputN>, ...}

Encodes to m4a and applies gain; by default, outputs to the current directory.

The "'`input`'" values can be either files or directories:

- if they're files: track gain is applied (individually)
- if they're directories:
  - album gain is applied, on a directory basis, to lossless files
  - non-audio files are ignored
  - subdirectories are not descended

Compressed input audio files which are not flac are copied, without being reencoded.

The codec used is libfdk_aac, in VBR, with a default quality of 3 (~110 kbps).

Requires aacgain, a recompiled FFmpeg, and GNU Parallel.

Please note that not all the input/quality combinations work (see https://hydrogenaud.io/index.php/topic,95989.msg817833.html#msg817833).
"

input_files=
destination="."
quality="3"
remove_file=

function decode_commandline_params {
  eval set -- "$(getopt --options hd:q:ar --long help,destination:,quality:,album,remove -- "$@")"

  while true ; do
    case "$1" in
      -h|--help)
        echo "$help"
        exit 0 ;;
      -d|--destination)
        destination="$2"
        shift 2 ;;
      -q|--quality)
        quality="$2"
        shift 2 ;;
      -r|--remove)
        remove_file=1
        shift ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -eq 0 ]]; then
    echo "$help"
    exit 1
  fi

  input_files=("$@")
}

function activate_debug {
  exec 5> "$(dirname "$(mktemp)")/$(basename "$0").log"
  BASH_XTRACEFD="5"
  set -x
}

function check_prerequisites {
  if ! [[ -x "$(command -v parallel)" ]]; then
    >&2 echo 'The `parallel` binary is not in $PATH.'
    exit 1
  elif [[ ! -d "$destination" ]]; then
    >&2 echo "The specified destination doesn't exist."
    exit 1
  fi
}

# For simplicity, only files in directories are encoded in parallel.
#
function encode_input_files {
  local source_file_for_type_check

  for source_file in "${input_files[@]}"; do
    source_file_for_type_check=$(readlink -f "$source_file")

    if [[ -f "$source_file_for_type_check" ]]; then
      encode_file "$source_file"
    elif [[ -d "$source_file_for_type_check" ]]; then
      encode_directory "$source_file"
    else
      echo "Source type not recognized: $source_file"
      exit 1
    fi
  done
}

# Generate a temporary file with the same extension as `$1`.
#
function create_intermediate_file_name {
  mktemp --suffix=".${1##*.}"
}

function encode_file {
  local file_mime_type
  local destination_file
  local intermediate_file
  local source_file=$1
  local source_file_for_type_check

  if [[ -L $source_file ]]; then
    source_file_for_type_check=$(readlink -f "$source_file")
  else
    source_file_for_type_check=$source_file
  fi

  file_mime_type="$(file --mime-type "$source_file_for_type_check" | grep -oP '\S+/\S+$')"

  case "$file_mime_type" in
  audio/flac | audio/x-flac | audio/x-wav )
    echo "Encoding $source_file..."

    destination_file="$destination/$(basename "${source_file%.*}.m4a")"
    intermediate_file="$(create_intermediate_file_name "$destination_file")"

    ffmpeg -y -hide_banner -loglevel error -i "$source_file" -vn -c:a libfdk_aac -vbr "$quality" "$intermediate_file"
    ;;
  audio/x-m4a | video/mp4 | audio/mpeg )
    echo "Copying $source_file..."

    destination_file="$destination/$(basename "$source_file")"
    intermediate_file="$(create_intermediate_file_name "$destination_file")"

    cp "$source_file" "$intermediate_file"
    ;;
  * )
    echo "Unsupported file type for file source \"$source_file\": $file_mime_type"
    exit 1
    ;;
  esac

  echo -n "Normalizing (track) "

  # `-s -r`: ignore ffmpeg written tags, which set the album gain for each track separately.
  #
  aacgain -q -k -r -s r "$intermediate_file"

  mv "$intermediate_file" "$destination_file"

  if [[ $remove_file == 1 ]]; then
    rm -f "$source_file"
  fi
}

function encode_directory {
  local destination_subdir
  local intermediate_subdir
  local destination_subfiles=()
  # Don't care that this file is not deleted after an error; it's small and in the temporary
  # directory.
  local parallel_commands_list_file=

  destination_subdir="$destination/$(basename "$1")"
  intermediate_subdir="$(mktemp -d)"
  parallel_commands_list_file=$(mktemp)

  if [[ "$(readlink -f "$1")" == "$(readlink -f "$destination_subdir")" && $remove_file != 1 ]]; then
    echo "Destination matches the source \`$1\`; this is only allowed when \`--remove\` is specified."
    exit 1
  fi

  for source_subfile in "$1"/*; do
    local file_mime_type
    local destination_subfile

    file_mime_type="$(file --mime-type "$source_subfile" | grep -oP '\S+/\S+$')"

    case "$file_mime_type" in
    audio/flac | audio/x-flac | audio/x-wav )
      echo "Adding $source_subfile to encoding queue..."

      destination_subfile="$intermediate_subdir/$(basename "${source_subfile%.*}.m4a")"

      echo "ffmpeg -y -hide_banner -loglevel error -i $(printf "%q" "$source_subfile") -vn -c:a libfdk_aac -vbr $quality $(printf "%q" "$destination_subfile")" >> "$parallel_commands_list_file"

      destination_subfiles+=("$destination_subfile")
      ;;
    audio/x-m4a | video/mp4 | audio/mpeg )
      echo "Copying $source_subfile..."

      destination_subfile="$intermediate_subdir/$(basename "$source_subfile")"

      cp "$source_subfile" "$destination_subfile"

      destination_subfiles+=("$destination_subfile")
      ;;
    audio/* )
      echo "Unsupported file type for file source \"$source_subfile\": $file_mime_type"
      exit 1
      ;;
    image/* )
      echo "Copying $source_subfile..."

      cp "$source_subfile" "$intermediate_subdir/"
      ;;
    * )
      ;; # ignore other cases (eg. text files)
    esac
  done

  echo "Encoding audio files..."

  parallel < "$parallel_commands_list_file"

  rm "$parallel_commands_list_file"

  echo "Normalizing (album) $destination_subdir (tmp dir: $intermediate_subdir)..."

  # See `-s -r` note in the previous invocation.
  #
  aacgain -q -k -a -s r "${destination_subfiles[@]}"

  # Removing the source before moving is less clean than the reverse, but it simplifies the case of
  # the source directory being encoded in-place.
  #
  if [[ $remove_file == "1" ]]; then
    rm -r "$1"
  fi

  mv "$intermediate_subdir" "$destination_subdir"
}

decode_commandline_params "$@"
check_prerequisites
activate_debug
encode_input_files
