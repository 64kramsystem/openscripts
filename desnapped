#!/usr/bin/env bash

set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

c_snap_binary=${DESNAPPED_SNAP_BINARY:-$(which snap)}
c_help="Usage: $(basename "$0") [-h|--help] [-u|--user <user>] <operation> <snap_name>

- Start the snap services
- Executes the operation (run, install, remove...) on the specified snap
- Stop the snap services

It's possible to specify the snap binary via \$DESNAPPED_SNAP_BINARY, for systems where it's overwritten.

The parameter --invoking-user should not be manually passed (it's used when switching to sudo)."

v_invoking_user=
v_snap_name=
v_operation=

function decode_cmdline_args {
  local params
  params=$(getopt --options hu: --long help,user: --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -u|--user)
        v_invoking_user=$2
        shift 2 ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -ne 2 ]]; then
    echo "$c_help"
    exit 1
  fi

  v_operation=$1
  v_snap_name=$2
}

function ensure_sudo {
  if [[ $(id -u) -ne 0 ]]; then
    pkexec env DISPLAY="$DISPLAY" XAUTHORITY="$XAUTHORITY" DESNAPPED_SNAP_BINARY="$c_snap_binary" "$0" -u "$(whoami)" "$@"
    exit $?
  fi
}

function start_snapd_units {
  systemctl start snapd
}

function execute_snap_operation {
  sudo -u "$v_invoking_user" "$c_snap_binary" "$v_operation" "$v_snap_name"
}

function stop_snapd_units {
  systemctl stop snapd{,.socket,.seeded,.snap-repair.timer}
}

decode_cmdline_args "$@"
ensure_sudo "$@"
start_snapd_units
execute_snap_operation
stop_snapd_units
