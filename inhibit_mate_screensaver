#!/usr/bin/env bash

set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

c_help="Usage: $(basename "$0") [-h|--help]

Inhibits the screensaver, which prevents the screen to monitor to suspend.

Needed as of Feb/2022; tested on all the major graphic card producers.

See code for implementation details."

function decode_cmdline_args {
  local params
  params=$(getopt --options h --long help --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -ne 0 ]]; then
    echo "$c_help"
    exit 1
  fi
}

function main {
  # Complete madness:
  #
  # - if the screensaver is inactive, but running, it still affects the screen sleep
  # - it's not clear why it's required `pgrep mate-screensave` to match the process
  # - on some systems, after the process is executed, it takes some time for it to actually run
  # - one can't just kill the screensaver entirely, because it also handles the screen locking; there
  #   is some internal split between the two functions, as `--exit` disable the screen saving
  #   functionality, but not the locking.
  # - even after `--exit`, the screensaver is reexecuted after a while

  # Simplest solution: if the screensaver is not running yet, just sleep and retry.
  #
  while true; do
    # Blocks once executes successfully; given this, it's not worth making the script smart (e.g. by
    # backgrounding it), since Bash takes a negligible amount of resources.
    #
    mate-screensaver-command -i 2> /dev/null
    sleep 1
  done
}

decode_cmdline_args "$@"
main
