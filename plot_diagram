#!/usr/bin/env ruby

require 'simple_scripting/argv'
require 'csv'
require 'tempfile'
require 'tmpdir'

class PlotDiagramCommandLineDecoder
  def decode_cmline_args
    long_help = <<~HELP
      Plots a diagram (with a single Y scale) from a file (or stdin, when the file is not specified).

      Multiple formats are accepted.

      - the data can have a single column; in this case, it won't have X values:

          4
          7
          6

      - when there are two or more columns, the first column represents the X values:

          1 4 2
          2 7 3
          3 6 2

      - if one wants multiple lines without X values, specify `--no-x`:

          4 2
          7 3
          6 2

      The default fields separator is space; in order to specify comma separated fields (CSV-alike), use the `--csv` option.

      If `--output` is specified, the format is automatically gathered from the extension (currently, #{PlotDiagram::IMAGE_FORMATS_MAPPING.keys.join('/')} are supported.)

      Common date (not time) formats are automatically recognized for the x column, eg.:

          2015-May-08 1 3
          2015-May-09 1 4

    HELP

    SimpleScripting::Argv.decode(
      ['-c', '--csv',                     'Sets the input format as CSV'],
      ['-s', '--smooth',                  'Smooth line'],
      ['-f', '--fit',                     'Fit the diagram, instead of starting Y at 0'],
      ['-x', '--no-x',                    'With multiple columns, build a diagram without X values'],
      ['-a', '--auto-y-scale',            'With multiple columns, autoscale all the lines to fit the diagram'],
      ['-t', '--titles TITLE_1,TITLE_N',  'Set the titles'],
      ['-o', '--output FILENAME',         'Outputs to the specified file, instead of printing to screen'],
      ['-v', '--verbose',                 'Verbose mode (prints gnuplot commands)'],
      '[data_file]',
    ) || exit
  end
end

class PlotDiagram
  DEFAULT_Y_TITLE_PREFIX = 'y'
  DIAGRAM_SIZE = [1600, 900]
  IMAGE_FORMATS_MAPPING = {
    'png' => 'pngcairo',
    'svg' => "svg enhanced background rgb 'white'", # transparent is ugly on some platforms
  }
  MONTHS = %w[jan feb mar apr may jun jul aug sep oct nov dec]
  Y_PADDING_FRACTION = 0.04 # fraction of range

  # options:
  #   :csv
  #   :smooth
  #   :no_x
  #   :fit
  #   :auto_y_scale
  #   :titles
  #   :output
  #   :verbose
  #
  def plot(data_file, options={})
    # When the data is passed from stdin, we need to store it, because the script reads the data
    # twice.
    #
    data_file, data_file_is_temporary = prepare_data_file(data_file)

    gnuplot_commands = prepare_gnuplot_commands(data_file, options)

    execute_gnuplot_commands(gnuplot_commands, options)
  rescue => error
    puts error
    exit 1
  ensure
    File.unlink(data_file) if data_file_is_temporary && File.exists?(data_file)
  end

  private

  def prepare_data_file(data_file)
    if data_file.nil?
      data_file = Dir::Tmpname.create(['plot_data', '.txt']) { }
      IO.write(data_file, $stdin.read)

      [data_file, true]
    else
      [data_file, false]
    end
  end

  def prepare_gnuplot_commands(data_file, csv: false, no_x: false, auto_y_scale: false, fit: false, smooth: false, titles: nil, output: nil, **)
    data, x_time_format = parse_data_file(data_file, csv)
    data_column_numbers = find_data_columns_number(data)

    check_data_and_parameters_consistency!(x_time_format, data_column_numbers, fit, auto_y_scale)

    using_prefix, start_index = compute_using_settings(x_time_format, no_x, data_column_numbers)
    column_transformation = compute_column_transformation(data, start_index) if auto_y_scale
    titles = check_and_prepare_titles(titles, data_column_numbers, start_index)

    commands = prepare_command_output_settings(output)
    commands += prepare_command_graph_properties(auto_y_scale, smooth)
    commands += prepare_command_set_y_range(data, fit, start_index)
    commands += prepare_command_csv_setting if csv
    commands += prepare_command_date_settings(no_x, x_time_format) if x_time_format
    commands += prepare_command_plot_keyword
    commands += prepare_command_plot_lines(smooth, data_column_numbers, data_file, using_prefix, titles, start_index, column_transformation)
    commands + prepare_commands_pause
  end

  def execute_gnuplot_commands(commands, verbose: false, **)
    puts "# Running command:", "", commands, "" if verbose

    Tempfile.create(['plot_diagram', '.gp']) do |file|
      file.puts(commands)
      file.close

      # Madness. There is no clean way of waiting for the diagram window to be close before exiting
      # gnuplot (--persist leaves the diagram window open, but gnuplots exits).
      # `pause mouse close` does achieve this effect, but requires return to be tapped, after the
      # window is closed.
      # Therefore, we use `pause mouse close`, but we send a newline to stdin (!!!).
      #
      `echo | gnuplot --persist #{file.path}`
    end
  end

  ######################################################################################
  # COMMANDS CREATION
  ######################################################################################

  def prepare_command_output_settings(output)
    if output
      output_extension = output[/\w+$/]
      terminal_format = IMAGE_FORMATS_MAPPING[output_extension] || raise("File extension not supported: #{output_extension.inspect}")

      <<~PLOT
        set terminal #{terminal_format} size #{DIAGRAM_SIZE.join(',')}
        set output '#{output}'
      PLOT
    else
      "set terminal wxt size #{DIAGRAM_SIZE.join(',')}\n"
    end
  end

  def prepare_command_graph_properties(auto_y_scale, smooth)
    command = "set offset graph 0, 0, #{Y_PADDING_FRACTION}, #{Y_PADDING_FRACTION}\n"
    command += "set format y ''\n" if auto_y_scale
    command += "set samples 1000\n" if smooth
    command
  end

  def prepare_command_set_y_range(data, fit, start_index)
    return "" if fit

    all_positive = data.flat_map { |row| row[start_index - 1] }.all?(&:positive?)
    all_negative = data.flat_map { |row| row[start_index - 1] }.all?(&:negative?)

    if all_positive
      "set yrange [0:]\n"
    elsif all_negative
      "set yrange [:0]\n"
    else
      ""
    end
  end

  def prepare_command_csv_setting
    "set datafile separator ','\n"
  end

  def prepare_command_date_settings(no_x, x_time_format)
    raise "Date format detected on the first column, but `--no-x` has been specified!" if no_x

    commands += <<~PLOT
      set xdata time
      set timefmt '#{x_time_format}'
    PLOT
  end

  def prepare_command_plot_keyword
    "plot \\\n"
  end

  def prepare_command_plot_lines(smooth, data_column_numbers, data_file, using_prefix, titles, start_index, column_transformation)
    smooth_option = "smooth sbezier" if smooth

    start_index.upto(data_column_numbers).inject("") do |commands, i|
      column_reference = column_transformation ? column_transformation[i] : i

      commands += " '#{data_file}' using #{using_prefix}#{column_reference} with lines #{smooth_option} title '#{titles[i - start_index]}'"

      commands += ', \\' if i < data_column_numbers
      commands + "\n"
    end
  end

  # See comment in execute_gnuplot_commands.
  #
  def prepare_commands_pause
    "pause mouse close\n"
  end

  ######################################################################################
  # HELPERS
  ######################################################################################

  def parse_data_file(data_file, csv)
    if csv
      data = CSV.read(data_file)
    else
      data = IO.readlines(data_file).map { |line| line.strip.split(/\s+/) }
    end

    if data.empty?
      raise "No data found in the file!"
    end

    x_time_format = find_x_time_format(data)

    numbers_start_i = x_time_format ? 1 : 0

    data = data.map { |row| row[0 ... numbers_start_i] + row[numbers_start_i .. -1].map(&:to_f) }

    [data, x_time_format]
  end

  def find_x_time_format(data)
    case data[0][0]
    when /^\d{,2}-\d{,2}$/
      "%m-%d"
    when /^(#{MONTHS.join'|'})-\d{,2}$/i
      "%b-%d"
    when /^\d{4}-\d{,2}-\d{,2}$/
      "%Y-%m-%d"
    when /^\d{2}-\d{,2}-\d{,2}$/
      "%y-%m-%d"
    when /^\d{4}-(#{MONTHS.join'|'})-\d{,2}$/i
      "%Y-%b-%d"
    when /^\d{2}-\d{,2}-\d{,2}$/
      "%y-%b-%d"
    else
      nil
    end
  end

  def check_data_and_parameters_consistency!(x_time_format, data_column_numbers, fit, auto_y_scale)
    raise "Data is composed of only one date column!" if x_time_format && data_column_numbers == 1
    raise "Fit mode is currently required when using auto Y scale!" if auto_y_scale && !fit
  end

  # Returns [using_prefix, start_index]
  #
  def compute_using_settings(x_time_format, no_x, data_column_numbers)
    if x_time_format || (!no_x && data_column_numbers > 1)
      # Required when specifying time data.
      using_prefix = "1:"
      start_index = 2
    else
      start_index = 1
    end

    [using_prefix, start_index]
  end

  def compute_column_transformation(data, start_index)
    transposed_data = data.transpose[(start_index - 1) .. -1]

    shifts = transposed_data.map { |line_values| 0 - line_values.min }

    ranges = transposed_data.zip(shifts).map { |line_values, shift| line_values.max + shift }

    scaling_factors = ranges.map do |range|
      if range == 0
        1
      else
        ranges.max / range
      end
    end

    ->(i) { "(#{scaling_factors[i - 1]} * ($#{i} + #{shifts[i - 1]}))" }
  end

  def find_data_columns_number(data)
    data.first.size
  end

  def check_and_prepare_titles(titles, data_column_numbers, start_index)
    if titles
      y_columns_number = data_column_numbers + 1 - start_index

      if titles.size != y_columns_number
        raise "Mismatching number of titles/Y columns: #{titles.size}/#{y_columns_number}"
      end
    else
      titles = start_index.upto(data_column_numbers).map { |i| "#{DEFAULT_Y_TITLE_PREFIX}#{i}" }
    end

    titles.map { |title| title.gsub('_', '\_') }
  end
end

if __FILE__ == $PROGRAM_NAME
  options = PlotDiagramCommandLineDecoder.new.decode_cmline_args

  data_file = options.delete(:data_file)

  PlotDiagram.new.plot(data_file, options)
end
