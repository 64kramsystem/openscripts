#!/usr/bin/env ruby

require_relative 'kernel_packages_maintenance/kernel_version'

require 'English'
require 'fileutils'
require 'set'
require 'shellwords'
require 'simple_scripting/argv'

class CleanKernelPackages
  MODULES_DIRECTORY = '/lib/modules'
  # Must capture the longer string first, otherwise, `-unsigned` is interpreted as part of the version.
  #
  IMAGE_PACKAGE_PREFIX_REGEX = "^linux-(image-unsigned|image)-"
  HEADER_PACKAGE_PREFIX_REGEX = "^linux-headers-"

  NOTHING_TO_REMOVE_MESSAGE = "Nothing to remove!"

  def execute(simulate: false, keep_previous: false, delete_current: false)
    options = {simulate: simulate, keep_previous: keep_previous, delete_current: delete_current}

    current_version = KernelVersion.find_current
    latest_version = KernelVersion.find_latest

    if current_version == latest_version
      puts "Current kernel is up to date (#{current_version.to_s(raw: false)})", ""
    else
      puts "Current/latest kernel version: #{current_version.to_s(raw: false)}/#{latest_version.to_s(raw: false)}", ""
    end

    installed_image_versions = checked_find_installed_image_versions(current_version)

    puts "Currently installed image package versions:", *installed_image_versions.map { |version| "- #{version}" }, ""

    image_versions_to_remove = find_image_versions_to_remove(current_version, installed_image_versions, **options)

    if image_versions_to_remove.size > 0
      kernel_packages_to_remove = find_all_kernel_packages_for_versions(image_versions_to_remove)
      puts "Removing packages:", *kernel_packages_to_remove.map { |package| "- #{package}"}, ""
      remove_packages(kernel_packages_to_remove, simulate: simulate)
    else
      puts "No packages to remove!"
    end

    # WATCH OUT! Converting to set is very important, since Array#include? doesn't use the Hash equality
    # properties!
    #
    kept_image_versions = (installed_image_versions - image_versions_to_remove).to_set

    orphan_header_packages = find_orphan_header_packages(kept_image_versions)

    if orphan_header_packages.size > 0
      puts "Removing orphan header packages..."
      remove_packages(orphan_header_packages, simulate: simulate)
    else
      puts "No orphan headers to remove!"
    end

    module_directories_to_remove = find_module_directories_to_remove(kept_image_versions)

    if module_directories_to_remove.size > 0
      puts "Removing module directories..."
      remove_module_directories(module_directories_to_remove, simulate: simulate)
    else
      puts "No module directories to remove!"
    end

    if simulate && (image_versions_to_remove + orphan_header_packages + module_directories_to_remove).empty?
      $stderr.puts NOTHING_TO_REMOVE_MESSAGE
    end
  end

  private

  # Makes sure that a given version doesn't have multiple installed packages, as that would be
  # complicate the script. Not sure if this is a real-world case, but it may happen, for example,
  # if there is two packages with/out `-unsigned` are installed for the same version.
  #
  def checked_find_installed_image_versions(current_version)
    raw_packages_list = find_installed_packages(IMAGE_PACKAGE_PREFIX_REGEX)

    # version => package name
    #
    package_versions = {}

    raw_packages_list.each do |package_name|
      if package_name =~ /#{IMAGE_PACKAGE_PREFIX_REGEX}(.+)$/
        # The prefix regex captures one group, so we need to skip it.
        #
        version = KernelVersion.parse_uname_version($LAST_MATCH_INFO[2])

        if package_versions.key?(version)
          raise "Duplicates found for version #{version}: #{package_name} <> #{package_versions[version]}"
        else
          package_versions[version] = package_name
        end
      else
        raise "Unexpected package name: #{package_name}"
      end
    end

    package_versions.keys
  end

  def find_installed_packages(pattern)
    # Aptitude doesn't support the `?` metacharacter.
    #
    `aptitude search -w 120 ~i#{pattern.shellescape} | cut -c 5- | awk '{print $1}'`.split("\n")
  end

  def find_image_versions_to_remove(current_version, installed_image_versions, options = {})
    future_versions = installed_image_versions.select do |version|
      version > current_version
    end

    previous_versions = installed_image_versions.select do |version|
      version < current_version
    end

    versions_to_delete = previous_versions.sort

    versions_to_delete.pop if options[:keep_previous]

    versions_to_delete << current_version if options[:delete_current]

    versions_to_delete += future_versions.sort[0..-2] # Keep the latest future

    if versions_to_delete.size == installed_image_versions.size
      message = "No versions remaining after cleaning!"
      options[:simulate] ? puts(message) : raise(message)
    end

    versions_to_delete
  end

  def find_all_kernel_packages_for_versions(versions)
    package_matchers = versions.map do |version|
      "~i^linux-(headers|image|image-unsigned|image-extra|modules|modules-extra)-#{version.raw}\\b".shellescape
    end.join(' ')

    `aptitude search -w 120 #{package_matchers} | cut -c 5- | awk '{print $1}'`.split("\n")
  end

  def find_orphan_header_packages(kept_image_versions)
    # A bit tricky, because headers of multiple type have one parent header without the type.
    # Parent headers are uninstalled automatically when the children are uninstalled, so we don't
    # need to (directly) take care of them.
    #
    all_header_packages = find_installed_packages(HEADER_PACKAGE_PREFIX_REGEX)

    all_header_packages.each_with_object([]) do |package_name, orphan_header_packages|
      if package_name =~ /#{HEADER_PACKAGE_PREFIX_REGEX}(.+)$/
        header_version = KernelVersion.parse_uname_version($LAST_MATCH_INFO[1], raise_error: false)

        if header_version && !kept_image_versions.include?(header_version)
          orphan_header_packages << package_name
        end
      end
    end
  end

  # Sample of returned directory: `/lib/modules/5.0.2-050002-generic`
  #
  def find_module_directories_to_remove(kept_image_versions)
    all_module_dirnames = Dir[File.join(MODULES_DIRECTORY, '*')]
    image_version_strings = kept_image_versions.map(&:to_s).to_set

    all_module_dirnames.select do |full_module_dirname|
      base_module_dirname = File.basename(full_module_dirname)
      !image_version_strings.include?(base_module_dirname)
    end
  end

  def remove_packages(packages, simulate:)
    simulate_option = "-s" if simulate
    system("aptitude purge -y #{simulate_option} #{packages.join(' ')}")
  end

  def remove_module_directories(module_directories_to_remove, simulate:)
    module_directories_to_remove.each do |directory|
      if Dir.exist?(directory)
        puts "- #{directory}"
        FileUtils.rm_r(directory) unless simulate
      end
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  options = SimpleScripting::Argv.decode(
    ['-k', '--keep-previous',  "Keep one previous version (the latest)"],
    ['-d', '--delete-current', "Delete current; requires at least another version to be present"],
    ['-n', '--simulate',       "Simulate; don't remove any package"],
    long_help: <<~TXT
      When --simulate is used, if there is nothing to remove, the text '#{CleanKernelPackages::NOTHING_TO_REMOVE_MESSAGE}' is printed to stderr.
    TXT
  ) || exit

  CleanKernelPackages.new.execute(**options)
end
