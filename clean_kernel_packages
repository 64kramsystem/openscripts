#!/usr/bin/env ruby

require_relative 'kernel_packages_maintenance/kernel_version'

require 'English'
require 'fileutils'
require 'shellwords'
require 'simple_scripting/argv'

class CleanKernelPackages
  MODULES_DIRECTORY = '/lib/modules'

  def execute(simulate: false, keep_previous: false, delete_current: false)
    options = {simulate: simulate, keep_previous: keep_previous, delete_current: delete_current}

    current_version = KernelVersion.find_current

    puts "Current kernel version: #{current_version}", ""

    installed_versions = checked_find_installed_versions(current_version)

    puts "Currently installed package versions:", *installed_versions.map { |version| "- #{version}" }, ""

    versions_to_remove = find_versions_to_remove(current_version, installed_versions, **options)

    if versions_to_remove.size > 0
      packages_to_remove = find_packages_to_remove(versions_to_remove)
      puts "Removing packages:", *packages_to_remove.map { |package| "- #{package}"}, ""
      remove_packages(packages_to_remove, simulate: simulate)

      module_directories_to_remove = find_module_directories_to_remove(versions_to_remove)
      puts "Removing module directories..."
      remove_module_directories(module_directories_to_remove, simulate: simulate)
    else
      puts "Nothing to remove!"
    end
  end

  private

  # Makes sure that a given version doesn't have multiple installed packages, as that would be
  # complicate the script. Not sure if this is a real-world case, but it may happen, for example,
  # if there is two packages with/out `-unsigned` are installed for the same version.
  #
  def checked_find_installed_versions(current_version)
    raw_packages_list = find_installed_packages("^linux-(image|image-unsigned)-")

    # version => package name
    #
    package_versions = {}

    raw_packages_list.each do |package_name|
      if package_name =~ /^linux-image(-unsigned)?-(#{current_version.major}\.#{current_version.minor}\.\d+-\w+)/
        version = KernelVersion.parse_version($LAST_MATCH_INFO[2])

        if package_versions.key?(version)
          raise "Duplicates found for version #{version}: #{package_name} <> #{package_versions[version]}"
        else
          package_versions[version] = package_name
        end
      end
    end

    package_versions.keys
  end

  def find_installed_packages(pattern)
    `aptitude search -w 120 ~i#{pattern.shellescape} | cut -c 5- | awk '{print $1}'`.split("\n")
  end

  def find_versions_to_remove(current_version, installed_versions, options = {})
    future_versions = installed_versions.select do |version|
      version > current_version
    end

    previous_versions = installed_versions.select do |version|
      version < current_version
    end

    versions_to_delete = previous_versions.sort

    versions_to_delete.pop if options[:keep_previous]

    versions_to_delete << current_version if options[:delete_current]

    versions_to_delete += future_versions.sort[0..-2] # Keep the latest future

    if versions_to_delete.size == installed_versions.size
      message = "No versions remaining after cleaning!"
      options[:simulate] ? puts(message) : raise(message)
    end

    versions_to_delete
  end

  def find_packages_to_remove(versions)
    package_matchers = versions.map do |version|
      "~i^linux-(headers|image|image-unsigned|image-extra|modules|modules-extra)-#{version.raw}\\b".shellescape
    end.join(' ')

    `aptitude search -w 120 #{package_matchers} | cut -c 5- | awk '{print $1}'`.split("\n")
  end

  # Sample of returned directory: `/lib/modules/5.0.2-050002-generic`
  #
  def find_module_directories_to_remove(versions_to_remove)
    # Since we know that there can't be two duplicate versions, we can append the wildcard, in order
    # to catch the kernel type suffix (e.g. `-generic`), which is not retained by the KernelVersion.
    #
    versions_to_remove
      .map { |v| File.join(MODULES_DIRECTORY, "#{v.raw}*") }
      .flat_map { |glob| Dir[glob] }
  end

  def remove_packages(packages, simulate:)
    simulate_option = "-s" if simulate
    system("sudo aptitude purge -y #{simulate_option} #{packages.join(' ')}")
  end

  def remove_module_directories(module_directories_to_remove, simulate:)
    module_directories_to_remove.each do |directory|
      if Dir.exists?(directory)
        puts "- #{directory}"
        FileUtils.rm_r(directory) unless simulate
      end
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  options = SimpleScripting::Argv.decode(
    ['-k', '--keep-previous',  "Keep one previous version (the latest)"],
    ['-d', '--delete-current', "Delete current; requires at least another version to be present"],
    ['-n', '--simulate',       "Simulate; don't remove any package"],
  ) || exit

  CleanKernelPackages.new.execute(options)
end
