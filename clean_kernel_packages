#!/usr/bin/env ruby

require_relative 'kernel_packages_maintenance/kernel_version'

require 'fileutils'
require 'shellwords'
require 'simple_scripting/argv'

module KernelVersionPackageMatcher
  refine KernelVersion do
    def package_matcher
      version_pattern = "#{major}\\.#{minor}\\.#{patch}"

      # Aptitude doesn't support `\d` for matching digits.
      #
      if ongoing
        # Example: 4.10.0-14
        version_pattern + "-#{ongoing}\\b"
      elsif rc
        # Example: 4.12.0-041200rc7
        version_pattern + "-[0-9]{6}rc#{rc}\\b"
      else
        # Example: 4.12.0-041200
        version_pattern + "-[0-9]{6}\\b"
      end
    end
  end
end

class CleanKernelPackages
  MODULES_DIRECTORY = '/lib/modules'

  using KernelVersionPackageMatcher

  # include_versions: (Array of KernelVersion) act like the versions passed are installed; it's
  #                   legal, but dangerous, to use this in a regular (non-dry) run.
  #
  def execute(no_exec: false, keep_previous: false, delete_current: false, include_versions: [])
    options = {simulate: no_exec, keep_previous: keep_previous, delete_current: delete_current}

    current_version = KernelVersion.find_current

    puts "Current kernel version: #{current_version}", ""

    installed_versions = find_installed_versions(current_version, include_versions: include_versions)

    puts "Currently installed package versions:", *installed_versions.map { |version| "- #{version}" }, ""

    versions_to_remove = find_versions_to_remove(current_version, installed_versions, **options)

    if versions_to_remove.size > 0
      packages_to_remove = find_packages_to_remove(versions_to_remove)
      module_directories_to_remove = find_module_directories_to_remove(versions_to_remove, packages_to_remove)

      puts "Removing packages:", *packages_to_remove.map { |package| "- #{package}"}, ""

      remove_packages(packages_to_remove, simulate: no_exec)
      remove_module_directories(module_directories_to_remove, simulate: no_exec)
    else
      puts "Nothing to remove!"
    end
  end

  private

  def find_installed_versions(current_version, include_versions: [])
    raw_packages_list = find_installed_packages("^linux-(headers|image|image-extra)-#{current_version.major}\\.#{current_version.minor}\\.")

    package_versions = raw_packages_list.map do |package_name|
      raw_version = package_name[/linux-\w+(-\w+)?-(\d+\.\d+\.\d+-\w+)/, 2] || raise("Version not identified: #{package_name}")
      KernelVersion.parse_version(raw_version)
    end

    package_versions += include_versions

    # We catch both the linux-header and the linux-headers-generic, so we uniq them.
    #
    package_versions.uniq
  end

  def find_installed_packages(pattern)
    `aptitude search -w 120 ~i#{pattern.shellescape} | cut -c 5- | awk '{print $1}'`.split("\n")
  end

  def find_versions_to_remove(current_version, installed_versions, options = {})
    future_versions = installed_versions.select do |version|
      version > current_version
    end

    previous_versions = installed_versions.select do |version|
      version < current_version
    end

    versions_to_delete = previous_versions.sort

    versions_to_delete.pop if options[:keep_previous]

    versions_to_delete << current_version if options[:delete_current]

    versions_to_delete += future_versions.sort[0..-2] # Keep the latest future

    raise "No versions remaining after cleaning!" if versions_to_delete.size == installed_versions.size

    versions_to_delete
  end

  def find_packages_to_remove(versions)
    package_matchers = versions.map do |version|
      "~i^linux-(headers|image|image-extra|modules|modules-extra)-#{version.package_matcher}".shellescape
    end.join(' ')

    `aptitude search -w 120 #{package_matchers} | cut -c 5- | awk '{print $1}'`.split("\n")
  end

  # Sample of returned directory: `/lib/modules/5.0.2-050002-generic`
  #
  def find_module_directories_to_remove(versions_to_remove, packages_to_remove)
    versions_matcher = "(?:" + versions_to_remove.map(&:package_matcher).join('|') + ")"

    # Example of image package names:
    #
    # - linux-image-4.15.0-1004-oem
    # - linux-image-unsigned-5.0.4-050004-generic
    #
    # There is always the kernel type suffix, but not always `-unsigned`
    #
    module_base_directories = packages_to_remove.join("\n").scan(/^linux-image(?:-unsigned)?-(#{versions_matcher}-\w+)/).flatten

    module_base_directories.map { |module_directory| File.join(MODULES_DIRECTORY, module_directory) }
  end

  def remove_packages(packages, simulate:)
    simulate_option = "-s" if simulate
    system("sudo aptitude purge -y #{simulate_option} #{packages.join(' ')}")
  end

  def remove_module_directories(module_directories_to_remove, simulate:)
    puts "Removing module directories..."

    module_directories_to_remove.each do |directory|
      if Dir.exists?(directory)
        puts "- #{directory}"
        FileUtils.rm_f(directory) unless simulate
      end
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  options = SimpleScripting::Argv.decode(
    ['-k', '--keep-previous',  "Keep one previous version (the latest)"],
    ['-d', '--delete-current', "Delete current; requires at least another version to be present"],
    ['-n', '--no-exec',        "Dry run; don't remove any package"],
  ) || exit

  CleanKernelPackages.new.execute(options)
end
