#!/usr/bin/env ruby

require 'date'
require 'pathname'
require 'shellwords'
require 'zip'

require 'simple_scripting/argv'
require 'simple_scripting/configuration'

class InvoiceGenerator
  REQUIRED_CONFIGURATION_KEYS=%w(
    price
    professional_name professional_address professional_vat_number professional_contacts
    client_name client_address_line_1 client_address_line_2 client_vat_number
    bank_address_line_1 bank_address_line_2 iban bic
  )

  TEMPLATE_DIR  = File.expand_path('../mk_invoice_template', __FILE__)
  TEMPLATE_FILE = File.join(TEMPLATE_DIR, 'word', 'document.xml')
  TEMPLATE_BAK  = TEMPLATE_FILE + '.bak'

  def initialize
    configuration = SimpleScripting::Configuration.load(required: REQUIRED_CONFIGURATION_KEYS)

    @price = configuration.price.to_i
    @configuration = configuration
  end

  # Returns the output filename
  #
  def generate(service_days, options = {})
    service_month = compute_service_month(options)

    outfile = options[:output_file] || generate_output_file(service_month) || raise("Missing :output_directory configuration (and no :output_file provided)")
    source_template = IO.read(TEMPLATE_FILE)

    template_values = add_computed_fields_to_data(service_days, service_month, options[:expenses])

    compiled_template = compile_template(source_template, template_values)

    IO.write(TEMPLATE_BAK, compiled_template)

    File.delete(outfile) if File.exist?(outfile)

    compress_directory(TEMPLATE_DIR, outfile, ignore: [TEMPLATE_FILE], rename: { TEMPLATE_BAK => TEMPLATE_FILE })

    outfile
  ensure
    File.delete(TEMPLATE_BAK) if File.exist?(TEMPLATE_BAK)
  end

  private

  # Generates in the format "%y%m%d_invoice_%B.docx"
  #
  def generate_output_file(service_month)
     return if @configuration.output_directory.nil?

     base_filename = Date.today.strftime("%y%m%d_invoice_") + service_month.strftime("%B.docx").downcase

     File.join(@configuration[:output_directory], base_filename)
  end

  def add_computed_fields_to_data(service_days, service_month, expenses_expression)
    development_cost = service_days * @price
    expenses = compute_expenses(expenses_expression)
    total = development_cost + expenses

    @configuration.to_h.merge(
      invoice_number: service_month.strftime('%Y/%m'),
      invoice_date:   Date.today.strftime('%d/%b/%Y'),
      service_period: service_month.strftime('%B %Y'),
      service_days:   humanize_float(service_days),
      price:          @price,
      development_cost: development_cost,
      expenses:       fmt_price(expenses),
      total:          fmt_price(total),
    )
  end

  def compile_template(source_template, template_values)
    template_values.inject(source_template) do |template, (key, value)|
      template.gsub("{{#{ key }}}", value.to_s)
    end
  end

  def humanize_float(float)
    float == float.to_i ? float.to_i : float
  end

  def fmt_price(price)
    '%.2f' % price
  end

  def compress_directory(directory, zipfile_name, options = {})
    ignore_files = options[:ignore] || []
    rename_files = options[:rename] || {}

    Zip::File.open(zipfile_name, Zip::File::CREATE) do |zipfile|
      raw_input_filenames = find_all_directory_files(directory)

      raw_input_filenames.each do |raw_filename|
        # print raw_filename

        if ignore_files.include?(raw_filename)
          # puts " -> SKIPPED"

          next
        elsif rename_files.key?(raw_filename)
          # print " -> RENAMED"

          relative_filename = Pathname.new(rename_files[raw_filename]).relative_path_from(Pathname.new(directory)).to_s
        else
          relative_filename = Pathname.new(raw_filename).relative_path_from(Pathname.new(directory)).to_s
        end

        # puts " -> #{ relative_filename }"

        zipfile.add(relative_filename, raw_filename)
      end
    end
  end

  def find_all_directory_files(directory)
    # d*ck!! without the flag, it doesn't find hidden files, with, it includes the '.' entries
    #
    Dir.glob(File.join(directory, '**/*'), File::FNM_DOTMATCH).select { |file| File.basename(file) != '.' }
  end

  def compute_service_month(options)
    if options[:before_previous_month]
      Date.today.prev_month.prev_month
    elsif options[:previous_month]
      Date.today.prev_month
    else
      Date.today
    end
  end

  # Accepts an expression (a number is considered so).
  #
  # Assumes there is no malicious intent in the expression.
  #
  def compute_expenses(expenses_expression)
    case expenses_expression
    when nil, ""
      return 0
    when /^[ \d.+-]+$/
      eval(expenses_expression)
    else
      raise "Unrecognized expenses expression!"
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  long_help = <<~HELP
    Prepares a generic (software engineering) invoice in Office Open XML format, using a template, and the data provided in the configuration file.

    Required configuration file keys:

    #{InvoiceGenerator::REQUIRED_CONFIGURATION_KEYS.map { |entry| "- #{entry}" }.join("\n") }

    Optionally, the \`output_directory\` makes the script output the file with name \`%y%m%d_invoice_%B.docx\` in the specified directory.
    If both \`output_directory\` and \`output_file\` are specified, the latter prevails.

    At the end of the script, the filename is printed, and the file is opened via the system-configured application.
  HELP

  options = SimpleScripting::Argv.decode(
      [ '-e', '--expenses EXPENSES_EXPRESSION', 'Include expenses; allows a simple expression (additions/subtractions)' ],
      [ '-p', '--previous-month',               'Bill the previous month'                                               ],
      [ '-b', '--before-previous-month',        'Bill the before-previous month (overrides -p)'                         ],
      'service_days',
      '[output_file]',
      long_help: long_help
  ) || exit

  service_days = options.delete(:service_days).to_f

  puts InvoiceGenerator.new.generate(service_days, options)
end
