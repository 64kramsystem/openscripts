#!/usr/bin/env bash

set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

c_default_extension=mkv
c_default_preset=slower
c_crf=25
c_temp_dir=$(mktemp --directory "${TMPDIR:-/tmp}/$(basename "$0")-XXXXX")
# Very roughly tested. 3 processes saturate a 7950x; 2 leave some room (~2700/2900% used).
declare -A c_procs_mapping=(
  [32]=2
  [16]=2
  [4]=1
)
c_help="Usage: $(basename "$0") [-h|--help] [-b|--batch] [-d|--deinterlace] [-s|--square <dar_ratio>] [-r|--resize height_px] [-c|--cut <start>-<end>] [-p|--preset <preset>] [-e|--extension <ext>] [-o|--output-dir <path>] <input> {<input>, ...}

Encodes video files to h265, in parallel; copies the audio. The number of parallel procs is based on an internal table.
The default x265 preset is '$c_default_preset', with CRF=$c_crf.
The file extension is replaced with '$c_default_extension' (or '--extension', when provided).

Files workflow:

- if an output file exists already, the script exits before encoding any file
- input files are moved to a temp dir
- in case of error/termination
  - output files are deleted
  - input files are moved back
- in case of success
  - input files are left in the temp dir

Video filters:

- deinterlace (performed via yadif)
- convert to square pixels (DAR ratio, e.g. '4/3'); sets SAR to 1
- resize (new height in pixels)

The <start> and <end> options of '--cut' are timestamps in the '[[hh:]mm:]ss[.sss]' format. The ends can be omitted.

If \$SCRIPTING_ALARM_PROGRAM is defined, it's executed after encoding.

In batch mode, output files are not printed, and the alarm program is not invoked.
"

# For simplicity, temp input and output files are in the same order as the orig input files.
v_orig_input_files=()
v_temp_input_files=()
v_output_files=()

v_parallel_procs=         # numeric
v_batch_mode=             # boolean; false=blank, true=anything else
v_deinterlace=            # boolean; false=blank, true=anything else
v_dar_ratio=              # string
v_resize=                 # numeric; vertical size
v_segment=                # string '<start>-<end>' (see help).
v_preset=$c_default_preset
v_extension=$c_default_extension
v_output_dir=             # optional; when set, has never a trailing slash

function decode_cmdline_args {
  local params
  params=$(getopt --options hbds:r:c:p:e:o: --long help,batch,deinterlace,square:,resize:,cut:,preset:,extension:,output-dir: --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -b|--batch)
        v_batch_mode=1
        shift ;;
      -v|--deinterlace)
        v_deinterlace=1
        shift ;;
      -s|--square)
        v_dar_ratio=$2
        shift 2 ;;
      -r|--resize)
        v_resize=$2
        shift 2 ;;
      -c|--cut)
        v_segment=$2
        shift 2 ;;
      -p|--preset)
        v_preset=$2
        shift 2 ;;
      -e|--extension)
        v_extension=$2
        shift 2 ;;
      -o|--output-dir)
        v_output_dir=$2
        shift 2 ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -lt 1 ]]; then
    echo "$c_help"
    exit 1
  fi

  if [[ -n $v_dar_ratio && ! $v_dar_ratio =~ ^[[:digit:]]{1,2}/[[:digit:]]{1,2}$ ]]; then
    >&2 echo "Unexpected DAR ratio."
    echo "$c_help"
    exit 1
  fi

  if [[ -n $v_dar_ratio && $v_resize ]]; then
    # There's nothing preventing this, but want to avoid accidents, as typically only one of the two
    # needs to be performed.
    #
    >&2 echo "Changing ratio and resizing can't be performed together"
    echo "$c_help"
    exit 1
  fi

  if [[ -n $v_segment ]] && ! grep -qP '^((\d{1,2}:)?(\d{1,2}:)?\d{1,2}(\.\d+)?)?-((\d{1,2}:)?(\d{1,2}:)?\d{1,2}(\.\d+)?)?$' <<< "$v_segment"; then
    >&2 echo "Invalid segment format."
    echo "$c_help"
    exit 1
  fi

  v_output_dir=${v_output_dir%/}

  v_orig_input_files=("$@")

  for file in "${v_orig_input_files[@]}"; do
    v_temp_input_files+=("$c_temp_dir"/"$(basename "$file")")

    [[ -n $v_output_dir ]] && file="$v_output_dir/$(basename "$file")"
    v_output_files+=("${file%.*}.$v_extension")
  done

  local processors_count
  processors_count=$(nproc)
  if [[ -v c_procs_mapping[$processors_count] ]]; then
    v_parallel_procs=${c_procs_mapping[$processors_count]}
  else
    >&2 echo "Procs count mapping not found for $processors_count processors."
    exit 1
  fi
}

function check_input_files {
  for file in "${v_orig_input_files[@]}"; do
    # The argument `-of csv=p=0` can return `video,`.
    #
    if [[ $(ffprobe -v error -select_streams v:0 -show_entries stream=codec_type -of default=noprint_wrappers=1:nokey=1 "$file") != "video" ]]; then
      >&2 echo "The input '$file' is not/doesn't contain a video"
      exit 1
    fi
  done
}

function print_temp_dir {
  echo "Temp dir: $c_temp_dir"
}

function move_input_files_to_tmp_dir {
  for (( i = 0; i < "${#v_orig_input_files[@]}"; i++ )); do
    mv "${v_orig_input_files[$i]}" "${v_temp_input_files[$i]}"
  done
}

function perform_checks {
  if [[ -n $v_output_dir && ! -d $v_output_dir ]]; then
    >&2 echo "The specified output directory doesn't exist!"
    exit 1
  fi

  for file in "${v_orig_input_files[@]}"; do
    if [[ $file == *$'\n'* || $file == *\"* ]]; then
      >&2 echo "File '$file' includes a newline/double quote!"
      exit 1
    fi
  done

  for file in "${v_output_files[@]}"; do
    if [[ -f $file ]]; then
      >&2 echo "File '$file' exists!"
      exit 1
    fi
  done
}

# Delete output files in case of interruption/error.
#
function register_exit_hooks {
  function _error_exit_hook {
    for file in "${v_output_files[@]}"; do
      rm -f "$file"
    done

    for (( i = 0; i < "${#v_orig_input_files[@]}"; i++ )); do
      if [[ -f "${v_temp_input_files[$i]}" ]]; then
        mv "${v_temp_input_files[$i]}" "${v_orig_input_files[$i]}"
      fi
    done

    echo "Original files restored."
  }

  trap '[[ $? -ne 0 ]] && _error_exit_hook' EXIT
}

function encode_files {
  local global_options=()

  local video_options=()

  local start_segment=${v_segment%-*}
  local end_segment=${v_segment#*-}

  if [[ -n $start_segment ]]; then
    video_options+=("-ss $start_segment")
  fi
  if [[ -n $end_segment ]]; then
    video_options+=("-to $end_segment")
  fi

  local video_filters=()

  if [[ -n $v_deinterlace ]]; then
    video_filters+=("yadif=mode=0")
  fi

  if [[ -n $v_dar_ratio ]]; then
    local dar_wh=$v_dar_ratio dar_hw=${v_dar_ratio#*/}/${v_dar_ratio%/*}
    video_filters+=("scale='min(iw,ih*$dar_wh)':'round(min(ih,iw*$dar_hw)/2)*2',setsar=1")
  fi

  if [[ -n $v_resize ]]; then
    video_filters+=("scale=-2:$v_resize")
  fi

  local video_filters_par=""
  if [[ ${#video_filters[@]} -gt 0 ]]; then
    video_filters_par=$(IFS=,; echo -n "-vf \"${video_filters[*]}\"")
  fi

  local ffmpeg_command="\
ffmpeg \
  ${global_options[*]} \
  -i {1} \
  ${video_options[*]} \
  -c:a copy \
  $video_filters_par \
  -c:v libx265 -crf $c_crf -preset $v_preset -pix_fmt yuv420p10le -x265-params asm=avx512 \
  {2}
"

  echo "$(IFS=$'\n'; echo "${v_temp_input_files[*]}")" \
    | parallel --xapply --max-procs "$v_parallel_procs" --line-buffer "$ffmpeg_command" ::: "${v_temp_input_files[@]}" ::: "${v_output_files[@]}"
}

function list_files {
  echo

  for ((i = 0; i < "${#v_temp_input_files[@]}"; i++)); do
    # shellcheck disable=2012 # find has no advantage here
    # shellcheck disable=2016 # $ in the single quotes are not expressions
    (
      ls -lh --sort=none "${v_temp_input_files[i]}"
      ls -lh --sort=none "${v_output_files[i]}"
    ) \
    | ruby -ane 'puts "#{$F[4]}\t #{File.basename($F[8..].join(" "))}"'
  done

  echo
}

function main {
  # Since all files are moved, if one accidentally selects other many/large files and interrupts, they
  # may leave the files half moved.
  # In order to avoid this, we check the files first.
  check_input_files

  print_temp_dir

  # First move the files, as the error exit hook assumes it. For simplicity, if there is an interruption
  # or error while moving, we let the use handle it.
  move_input_files_to_tmp_dir

  register_exit_hooks
  perform_checks
  encode_files
  if [[ -z $v_batch_mode ]]; then
    list_files
    "${SCRIPTING_ALARM_PROGRAM:-true}"
  fi
}

decode_cmdline_args "$@"
main
