#!/usr/bin/env bash

set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

c_help="Usage: $(basename "$0") [-h|--help]

Upgrades and restarts Maestral."

function decode_cmdline_args {
  local params
  params=$(getopt --options h --long help --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -ne 0 ]]; then
    echo "$c_help"
    exit 1
  fi
}

function stop_gui {
  pkill -f 'maestral_(gui|qt)' || true
}

function do_upgrade {
  pip3 install --upgrade maestral[gui]
}

function start_gui {
  maestral gui &
}

# Processes sample:
#
#   9324 /usr/bin/python3 -m maestral_qt -c maestral                                                     # started gui
#   75473 /usr/bin/python3 /home/saverio/.local/bin/maestral gui                                         # alternative started gui
#   75491 /usr/bin/python3 -c import maestral.daemon; maestral.daemon.start_maestral_daemon("maestral")  # daemon

decode_cmdline_args "$@"
# Stop only the GUI; the main service needs to be running.
stop_gui
do_upgrade
# The upgrade is confusing; if a GUI is running, another will be started; if it isn't, none will.
start_gui
