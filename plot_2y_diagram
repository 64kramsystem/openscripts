#!/usr/bin/env ruby

require 'simple_scripting/argv'
require 'tempfile'

class Plot2yDiagramCommandLineDecoder
  def decode_cmline_args
    long_help = <<~HELP
      Plots a file with 1 or 2 lines, using two separate scales. Sample:

          # comment
          1 1 3 # another comment
          2 1
          4 2 1

      Y2 values are optional, and the data points for the second line can be entirely omitted (but it will cause warnings to be raised).

      The input file uses spaces as separator; in order to use comma separated fields (CSV-alike), set the `--csv` option.

      Common date (not time) formats are automatically recognized for the x column, eg.:

          2015-May-08 1 3
          2015-May-09 1 4

    HELP

    SimpleScripting::Argv.decode(
      ['-c', '--csv',          'Sets the input format as CSV'],
      ['-s', '--smooth',       'Smooth line'],
      ['-t', '--title1 TITLE', 'Set the title for y1'],
      ['-T', '--title2 TITLE', 'Set the title for y2'],
      ['-v', '--verbose',      'Verbose mode (prints gnuplot commands)'],
      'data_file'
    ) || exit
  end
end

class Plot2yDiagram
  DEFAULT_Y1_TITLE = 'y1'
  DEFAULT_Y2_TITLE = 'y2'
  DIAGRAM_SIZE = [1600, 900]
  MONTHS = %w[jan feb mar apr may jun jul aug sep oct nov dec]
  Y_PADDING_FRACTION = 0.04 # fraction of range

  # options:
  #   :csv
  #   :smooth
  #   :title1
  #   :title2
  #   :verbose
  #
  def plot(data_file, options={})
    gnuplot_commands = prepare_gnuplot_commands(data_file, options)
    execute_gnuplot_commands(gnuplot_commands, options)
  rescue => error
    puts error
    exit 1
  end

  private

  def find_x_time_format(data_file, csv:)
    data_file_content = IO.read(data_file)
    first_potential_timestamp = data_file_content[/^[\w-]+/]

    case first_potential_timestamp
    when /^\d{,2}-\d{,2}$/
      "%m-%d"
    when /^(#{MONTHS.join'|'})-\d{,2}$/i
      "%b-%d"
    when /^\d{4}-\d{,2}-\d{,2}$/
      "%Y-%m-%d"
    when /^\d{2}-\d{,2}-\d{,2}$/
      "%y-%m-%d"
    when /^\d{4}-(#{MONTHS.join'|'})-\d{,2}$/i
      "%Y-%b-%d"
    when /^\d{2}-\d{,2}-\d{,2}$/
      "%y-%b-%d"
    else
      nil
    end
  end

  def prepare_gnuplot_commands(data_file, csv: false, smooth: false, title1: DEFAULT_Y1_TITLE, title2: DEFAULT_Y2_TITLE, **)
    commands = <<~PLOT
      set terminal wxt size #{DIAGRAM_SIZE.join(',')}
    PLOT

    if csv
      commands += <<~PLOT
        set datafile separator ','
      PLOT
    end

    # `set offset graph` doesn't have any effect (on the y axis) when there are 2 y scales.
    #
    # Must run before setting the time format, since stats doesn't support timedata mode.
    #
    # We need to run two stats; otherwise, if the single version `using 2:3` ignores records
    # with only one data point.
    # Also note that on the second run, we need to ignore the ranges (which are set by the
    # first `stats`).
    #
    commands += <<~PLOT
      stats '#{data_file}' using 2 nooutput
      y_padding = (STATS_max - STATS_min) * #{Y_PADDING_FRACTION}
      set yrange [STATS_min - y_padding:STATS_max + y_padding]
      stats [*:*][*:*] '#{data_file}' using 3 nooutput
      y2_padding = (STATS_max - STATS_min) * #{Y_PADDING_FRACTION}
      set y2range [STATS_min - y2_padding:STATS_max + y2_padding]
    PLOT

    x_time_format = find_x_time_format(data_file, csv: csv)

    if x_time_format
      commands += <<~PLOT
        set xdata time
        set timefmt '#{x_time_format}'
      PLOT
    end

    smooth_option = "smooth sbezier" if smooth

    commands + <<~PLOT
      set y2tics
      set ytics nomirror
      plot '#{data_file}' using 1:2 #{smooth_option} with linespoints title '#{title1}',\\
           '#{data_file}' using 1:3 #{smooth_option} with linespoints title '#{title2}' axes x1y2
    PLOT
  end

  def execute_gnuplot_commands(commands, verbose: false, **)
    puts "# Running command:", "", commands, "" if verbose

    plot_file = Tempfile.open('plot_2y_diagram') { |file| file << commands }

    `gnuplot --persist #{plot_file.path}`
  ensure
    if plot_file
      plot_file.close
      File.unlink(plot_file)
    end
  end
end

if __FILE__ == $PROGRAM_NAME
  options = Plot2yDiagramCommandLineDecoder.new.decode_cmline_args

  data_file = options.delete(:data_file)

  Plot2yDiagram.new.plot(data_file, options)
end
