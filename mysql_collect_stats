#!/bin/bash

set -o nounset
set -o errexit
set -o pipefail

c_log_index_number_size=6
c_stat_files_prefix=stats_
c_configuration_dump_filename=configuration.txt

v_input_regex=
v_input_var_name="Input value"
v_limit=
v_mysql_host=
v_mysql_user=
v_mysql_password=
v_mysql_client_options=()
v_stats_dir=

c_help="Usage: $(basename "$0") [(-r|--input-regex)=<regex>] [(-v|--input-var-name)=<var_name>] [(-l|--limit)=<number>] [-H|--mysql-host <host>] [(-c|--mysql-credentials <user>:[<password>])] <stats_dir>

Collects the MySQL status values and dumps them into <stats_dir> (with prefix \`$c_stat_files_prefix\`), along with a dump of the server configuration (with filename $c_configuration_dump_filename).

If <stats_dir> exists, it's renamed to \`<stats_dir>.bak\`; if the renamed directory already exists, it's deleted.

The \`--limit\` option limits the number of stats (dumps) collected.

There are two processing modes: without input from stdin or with.

Without input, the script runs every second, and needs to be terminated with Ctrl+C.

With input, the script runs once for each line, and terminates once EOF is reached. In this mode, two options are available:

- \`--input-regex\`: a regex applied to each input line; requires a capturing group, whose capturing value is added to the stats as variables.
                   if a line doesn't match, stats are not captured for that cycle.
- \`--input-var-name\`: the name of the variable captured by the regex above; defaults to \`$v_input_var_name\`.

Examples:

    # Base collection from a remote server
    #
    $(basename "$0") -H 10.0.2.2 -c myuser:mypassword /tmp/mystats

    # Dump two sets of stats, each including a stat named \`myvalue\` whose values are, for each cycle, respectively \`1\` and \`3\`
    #
    printf \"_1_\\n_a_\\n_3_\" | $(basename "$0") -r '(\d)' --input-var-name myvalue /tmp/mystats
"

function decode_cmdline_parameters {
  eval set -- "$(getopt --options hr:v:l:H:c: --long help,input-regex:,input-var-name:,limit:,mysql-host:,mysql-credentials: -- "$@")"

  while true ; do
    case "$1" in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -r|--input-regex)
        v_input_regex=$2
        shift 2 ;;
      -v|--input-var-name)
        v_input_var_name=$2
        shift 2 ;;
      -l|--limit)
        v_limit=$2
        shift 2 ;;
      -H|--mysql-host)
        v_mysql_host=$2
        shift 2 ;;
      -c|--mysql-credentials)
        v_mysql_user=${2%%:*}
        v_mysql_password=${2#*:}
        shift 2 ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -ne 1 ]]; then
    echo "$c_help"
    exit 1
  else
    v_stats_dir="$1"
  fi
}

function prepare_mysql_options {
  [[ "$v_mysql_user"     != "" ]] && v_mysql_client_options+=(-u "$v_mysql_user")    || true
  [[ "$v_mysql_password" != "" ]] && v_mysql_client_options+=(-p"$v_mysql_password") || true # no space before the value!
  [[ "$v_mysql_host"     != "" ]] && v_mysql_client_options+=(-h "$v_mysql_host")    || true
}

function prepare_stats_dir {
  if [[ -d "${v_stats_dir}.bak" ]]; then
    rm -rf "${v_stats_dir}.bak"
  fi

  if [[ -d "$v_stats_dir" ]]; then
    mv "$v_stats_dir"{,.bak}
  fi

  mkdir "$v_stats_dir"
}

function dump_server_configuration {
  # The value of `optimizer_switch` is too long; ignore it.
  #
  mysql "${v_mysql_client_options[@]}" -ANte 'SHOW GLOBAL VARIABLES WHERE Variable_name NOT LIKE "optimizer_switch"' > "$v_stats_dir/$c_configuration_dump_filename"
}

# Input: $1=log file name input.
# Outputs to stdout.
#
function prepare_log_file_name {
  echo -n "$v_stats_dir/${c_stat_files_prefix}$(printf "%0${c_log_index_number_size}i" "$1").log"
}

# Input: $1=cycle index.
#
function dump_stats_snapshot {
  local log_file_name
  log_file_name="$(prepare_log_file_name "$1")"

  mysql "${v_mysql_client_options[@]}" -ANe 'SHOW GLOBAL STATUS LIKE "Innodb\_%"' > "$log_file_name"

  # For the checkpoint age computation, see the [specific article about text processing](/Theres-more-than-one-way-to-skin-a-perl).
  #
  mysql "${v_mysql_client_options[@]}" -ANe 'SHOW ENGINE InnoDB STATUS\G' |
    awk 'BEGIN { ORS=" " }; /^(Log sequence number|Last checkpoint at)/ { print $4 }' |
    perl -lane 'print "Checkpoint_age ".($F[0] - $F[1])' >> \
    "$log_file_name"
}

# Input: $1=input value, $2=cycle index
#
function dump_input_value {
  local log_file_name
  log_file_name="$(prepare_log_file_name "$2")"

  echo "$v_input_var_name $1" >> "$log_file_name"
}

function cycle_dump_stats {
  if [[ -t 0 ]]; then
    # Case: input is a terminal.
    #
    for ((i = 0; ; i++)); do
      dump_stats_snapshot "$i"

      sleep "0.$(printf '%04d' $((10000 - 10#$(date +%4N))))"

      # The first condition is actually optional.
      #
      if [[ -n "$v_limit" ]] && (( i == v_limit - 1 )); then
        exit
      fi
    done
  else
    # Case: input comes from another process.
    #
    i=0

    while IFS= read -r line || [[ -n "$line" ]]; do
      echo "$line"

      if [[ -z "$v_limit" ]] || (( i < "$v_limit" )); then
        if [[ "$v_input_regex" != "" ]]; then
          input_value=$(perl -ne "print /$v_input_regex/" <<< "$line")
        else
          input_value=$line
        fi

        if [[ "$input_value" != "" ]]; then
          dump_stats_snapshot "$i"
          dump_input_value "$input_value" "$i"

          ((i+=1))
        fi
      fi
    done
  fi
}

exec 5> "$(dirname "$(mktemp)")/$(basename "$0").log"
BASH_XTRACEFD="5"
set -x

decode_cmdline_parameters "${@}"
prepare_mysql_options
prepare_stats_dir
dump_server_configuration
cycle_dump_stats
