#!/usr/bin/env bash

set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

# Real-world cases (edited):
#
# - JPEGmini/'Foo - Bar 1 002-003.jpg'
# - JPEGmini/'Foo - Bar 1 298b.jpg'
#
# Regex notes:
#
# - ^/$ are implicit
# - the /x flag is used
#
export c_jpg_files_matcher='
.+/(
  .*\b[[:digit:]]{2,}[ab]?
)\.jpg'

c_unnecessary_files=(
  *.mp3
  *.txt
  *.xml
  Thumbs.db
)
c_help="Usage: $(basename "$0") [-h|--help] [-d|--delete-source-file] <input1.cbr input2.cbz...>

On deletion, if 'trash' is in the path, it will be used; otherwise, 'rm' will be."

v_input_files=()
v_delete_source_file= # boolean; false=blank, true=anything else
# The below are set on every cycle of the main for loop
v_input_file=
v_output_file=
v_temp_dir=

function decode_cmdline_args {
  local params
  params=$(getopt --options hd --long help,delete-source-file --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -d|--delete-source-file)
        v_delete_source_file=1
        shift ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -lt 1 ]]; then
    echo "$c_help"
    exit 1
  fi

  for file in "${@:1}"; do
    v_input_files+=("$(readlink -f "$file")")
  done
}

# The check itself is redundant (`decompress_file()` fails on unexpected formats), but it's convenient
# to terminate early.
#
function check_input_files {
  for file in "${v_input_files[@]}"; do
    if [[ ! $file =~ \.(cbr|cbz|zip)$ ]]; then
      >&2 echo "Unsupported file format: $file"
      exit 1
    fi
  done
}

function prepare_output_filename {
  v_output_file=${v_input_file%.cb*}.pdf
}

function create_temp_dir {
  v_temp_dir=$(mktemp -d)
}

function decompress_file {
  case $v_input_file in
  *.cbr)
    unrar x "$v_input_file" "$v_temp_dir"
    ;;
  *.cbz|*.zip)
    unzip "$v_input_file" -d "$v_temp_dir"
    ;;
  *)
    >&2 echo "Unsupported file format: ${v_input_file//*./}"
    exit 1
  esac
}

function enter_temp_dir {
  cd "$v_temp_dir"
}

function handle_subdirs {
  local subdirs_count=
  subdirs_count=$(find . -mindepth 1 -type d | wc -l)

  case $subdirs_count in
  0)
    # Do nothing
    ;;
  1)
    # Change dir
    cd ./*/
    ;;
  *)
    >&2 echo "More than one subdirectory found! Check content of: $v_temp_dir"
    exit 1
    ;;
  esac
}

function delete_unnecessary_files {
  rm -f -- "${c_unnecessary_files[@]}"
}

function check_filenames {
  local unexpected_filenames
  unexpected_filenames=$(find . -type f | perl -ne 'print if !/^$ENV{c_jpg_files_matcher}$/x')

  if [[ -n $unexpected_filenames ]]; then
    >&2 echo "Non jpg extensions found: $unexpected_filenames"
    exit 1
  fi
}

function pad_filenames {
  # All the numbers are padded; for simplicity, also the unnecessary ones (e.g. belonging to the
  # title).
  #
  rename 's/(\d+)/"0" x (4 - length($1)) . $1 . $2/eg' -- *.jpg
}

function create_pdf {
  # For unclear reasons, v6.9.10-23, when the source files are not in the current directory, sometimes
  # hangs.
  # Therefore, we make sure to be in the current directory.
  #
  convert -monitor ./*.jpg "$v_output_file"
}

function delete_temp_dir {
  rm -r "$v_temp_dir"
}

function delete_source_file {
  if [[ -x $(command -v trash) ]]; then
    trash "$v_input_file"
  else
    rm "$v_input_file"
  fi
}

decode_cmdline_args "$@"

check_input_files

for v_input_file in "${v_input_files[@]}"; do
  prepare_output_filename
  create_temp_dir
  decompress_file
  enter_temp_dir
  handle_subdirs
  delete_unnecessary_files
  check_filenames
  pad_filenames
  create_pdf
  delete_temp_dir
  if [[ -n $v_delete_source_file ]]; then
    delete_source_file
  fi
done
