#!/usr/bin/env bash

set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

c_audio_frequency=44100
c_audio_vbr_quality=3
c_video_crf=25
c_video_preset=slower

c_audio_encoding_options=(-ac 2 -ar "$c_audio_frequency" -c:a libfdk_aac -vbr "$c_audio_vbr_quality")
c_video_encoding_options=(-c:v libx265 -crf "$c_video_crf" -preset "$c_video_preset")

c_help="Usage: $(basename "$0") [-h|--help] [-c|--chapter-number <num>] [-n|--no-compress] [-f|--fastest] input outfile

Compresses a DVD to h264/aac, using ffmpeg.

The input must be either an iso file, or a 'video_ts' directory.

Interlaced videos are automatically detected and deinterlaced.

- '--no-compress' : Don't perform compression; useful to get only general information.
- '--fastest'     : Copies audio, and uses fastest preset; useful for testing.

Audio encoding options: ${c_audio_encoding_options[*]}
Video encoding options: ${c_video_encoding_options[*]}"

v_input=
v_out_file=
v_chapter_number=1
v_video_ts_dir=              # Must be global, as the exit hook function is not able to access local vars.
declare -A v_subtitles_meta  # { sid => "lang_short,lang_full" }
v_compress=1                 # If blank, compression is not performed.
v_fastest=                   # True if not blank

# They're set here, in order to allow a clean separation between header printing and encoding.
#
v_input_options=
v_audio_encoding_options=("${c_audio_encoding_options[@]}")
v_deinterlace_options=()
v_video_encoding_options=("${c_video_encoding_options[@]}")
v_output_options=

####################################################################################################
# MAIN STEPS
####################################################################################################

function decode_cmdline_args {
  local params
  params=$(getopt --options hc:nf --long help,chapter-number:,no-compress,fastest --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -c|--chapter-number)
        v_chapter_number=$2
        shift 2 ;;
      -n|--no-compress)
        v_compress=
        shift ;;
      -f|--fastest)
        v_fastest=1
        shift ;;
      --)
        shift
        break ;;
    esac
  done

  case $# in
  2)
    v_input=$1
    v_out_file=$2
    ;;
  *)
    echo "$c_help"
    exit 1
    ;;
  esac
}

function create_mountpoint {
  mktemp -d --suffix "-$(basename "$v_input")"
}

function register_mounted_iso_exit_hook {
  function _exit_hook {
    local mountpoint=${v_video_ts_dir%/*}

    if umount "$mountpoint"; then
      rm -rf "$mountpoint"
    else
      >&2 echo "Couldn't unmount image (mountpoint: $mountpoint)"
    fi
  }

  trap _exit_hook EXIT
}

function mount_iso {
  local mountpoint=${v_video_ts_dir%/*}

  if ! fuseiso "$v_input" "$mountpoint"; then
    >&2 echo "Couldn't mount image"
    exit 1
  fi
}

function find_and_set_subtitles_meta {
  local lsdvd_output
  lsdvd_output=$(lsdvd -s "$v_video_ts_dir" 2>&1)

  while IFS= read -r lsdvd_line; do
    if [[ $lsdvd_line =~ $(echo -n "Subtitle: [[:digit:]]+, Language: ([[:alpha:]]+) - ([[:alpha:]]+), .+, Stream id: ([[:alnum:]]+)") ]]; then
      if [[ -v v_subtitles_meta[${BASH_REMATCH[3]}] ]]; then
        >&2 echo "Found two subtitles with the same identifier: ${BASH_REMATCH[3]}"
      else
        v_subtitles_meta[${BASH_REMATCH[3]}]=${BASH_REMATCH[1]},${BASH_REMATCH[2]}
      fi
    fi
  done <<< "$lsdvd_output"

  # Double check, for safety, in case the format changes.
  #
  if [[ $lsdvd_output == *Subtitle:* && ${#v_subtitles_meta[@]} -eq 0 ]]; then
    >&2 echo 'lsdvd output included subtitles, but the pattern didn'\''t match any!'
    exit 1
  fi
}

function extract_subtitles {
  local vob_file
  vob_file=$(find_reference_vob_file)
  local out_file_noext=${v_out_file%.*}

  for sid in "${!v_subtitles_meta[@]}"; do
    local lang_data=${v_subtitles_meta[$sid]}
    local lang_short=${lang_data%,*} lang_extended=${lang_data#*,}

    # Printing the banner her is a bit inconsistent, but it's a trade-off.
    #
    echo "################################################################################"
    echo "# Extracting subtitle '$lang_short/$lang_extended' ($sid)..."
    echo "################################################################################"

    if [[ -n $v_compress ]]; then
      local sub_file=$out_file_noext.$sid.$lang_short.$lang_extended
      mencoder "$vob_file" -nosound -oac copy -ovc copy -o /dev/null -vobsubout "$sub_file" -sid "$sid"
    fi
  done
}

function check_video_interlaced {
  local vob_file
  vob_file=$(find_reference_vob_file)

  local ffprobe_output
  ffprobe_output=$(ffprobe -v error -show_entries stream=codec_name,width,height,field_order -of default=noprint_wrappers=1 -select_streams v "$vob_file")

  if echo "$ffprobe_output" | grep -qP '^field_order=(tt|bb)$'; then
    echo 1
  fi
}

function print_compression_banner {
  local is_interlaced=$1

  echo "################################################################################"
  echo "# Compressing input '$v_input'..."
  echo "#"
  echo "# FFmpeg opts:"
  echo "#"
  echo "# ${v_input_options[*]}"
  echo "# ${v_audio_encoding_options[*]}"
  echo "# ${v_deinterlace_options[*]}"
  echo "# ${v_video_encoding_options[*]}"
  echo "# ${v_output_options[*]}"
  echo "################################################################################"
}

function set_ffmpeg_options {
  local is_interlaced=$1

  local vobs_pattern="vts_0${v_chapter_number}_*.vob"

  v_input_options=(-i "concat:$(find "$v_video_ts_dir" -iname "$vobs_pattern" | sort | tr $'\n' '|')")

  if [[ -n $is_interlaced ]]; then
    v_deinterlace_options=(-vf "yadif")
  fi

  if [[ -n $v_fastest ]]; then
    v_audio_encoding_options=(-c:a copy)
    v_video_encoding_options=(-c:v libx265 -crf "$c_video_crf" -preset ultrafast)
  fi

  v_output_options=(-y "$v_out_file")
}

function invoke_ffmpeg {
  ffmpeg \
    "${v_input_options[@]}" \
    "${v_audio_encoding_options[@]}" \
    "${v_deinterlace_options[@]}" \
    "${v_video_encoding_options[@]}" \
    "${v_output_options[@]}"

}

####################################################################################################
# HELPERS
####################################################################################################

function find_reference_vob_file {
  # fuseiso exposes files as lowercase, so we need case-insensitive search.
  #
  local vob_file
  vob_file=$(find "$v_video_ts_dir" -iname "vts_0${v_chapter_number}_1.vob")

  if [[ -z $vob_file ]]; then
    >&2 echo "Couldn't find VOB file"
    exit 1
  fi

  echo -n "$vob_file"
}

####################################################################################################
# MAIN()
####################################################################################################

function main {
  if [[ -f $v_input ]]; then
    v_video_ts_dir=$(create_mountpoint)/video_ts
    register_mounted_iso_exit_hook
    mount_iso
  else
    v_video_ts_dir=$v_input
  fi

  find_and_set_subtitles_meta
  extract_subtitles

  is_interlaced=$(check_video_interlaced)
  set_ffmpeg_options "$is_interlaced"

  print_compression_banner "$is_interlaced"

  if [[ -n $v_compress ]]; then
    invoke_ffmpeg
  fi
}

decode_cmdline_args "$@"
main
