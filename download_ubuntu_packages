#!/usr/bin/env ruby

require 'open-uri'
require 'ruby-progressbar'
require 'uri'
require 'net/http'

require 'simple_scripting/argv'

# Ubuntu's packages website is disgracefully unstable.
#
DOWNLOAD_PAGE_MAX_RETRIES = 3

# Specify this to download the current development version.
#
DEV_UBUNTU_VERSION_PARAM = 'devel'

class DownloadWithProgress
  def execute(address, destination_file)
    uri = URI(address)

    Net::HTTP.start(uri.host) do |http|
      response = http.request_head(address)

      raise "File not found!" if response.code.to_i == 404

      file_basename = File.basename(destination_file)
      file_size = response['content-length'].to_i

      progress_bar = ProgressBar.create(title: file_basename, total: file_size)

      File.open(destination_file, "wb") do |file|
        http.get(address) do |data_chunk|
          file << data_chunk
          progress_bar.progress += data_chunk.length
        end
      end

      progress_bar.finish
    end
  end
end

class DownloadUbuntuPackages
  INDEX_SERVER_ADDRESS = "http://packages.ubuntu.com"
  PACKAGE_SERVER_ADDRESS = "http://de.archive.ubuntu.com"
  ALTERNATE_PACKAGE_SERVER_ADDRESS = "http://security.ubuntu.com"
  DEFAULT_ARCHITECTURE = "amd64"

  # It seems that there is no programmatic way to find the releases.
  # The below seem to be reasonably robust; the releases page doesn't include releases under development,
  # so we gather the name from the daily build.
  #
  RELEASES_ADDRESS = "https://releases.ubuntu.com"
  DAILY_BUILD_ADDRESS = "https://cdimage.ubuntu.com/daily-live/current"

  def execute(packages, download_to: Dir.pwd, skip_ssl_verification: false, release: nil, address_only: false)
    ssl_verify_mode = skip_ssl_verification ? OpenSSL::SSL::VERIFY_NONE : OpenSSL::SSL::VERIFY_PEER

    if release.nil?
      release = find_latest_release(ssl_verify_mode)
    elsif release == DEV_UBUNTU_VERSION_PARAM
      release = find_latest_dev_release(ssl_verify_mode)
    end

    packages.each do |package|
      package_download_page = find_and_open_package_download_page(release, package, ssl_verify_mode)
      package_address = find_package_address(package_download_page, package)

      if address_only
        print package_address
      else
        destination_file = compose_destination_file(package_address, download_to)

        if File.exist?(destination_file)
          puts ">>> File #{destination_file.inspect} existing; not downloading"
        else
          DownloadWithProgress.new.execute(package_address, destination_file)
        end
      end
    end
  end

  private

  def find_latest_release(ssl_verify_mode)
    releases_page = URI.open(RELEASES_ADDRESS, ssl_verify_mode: ssl_verify_mode).read

    # Sample:
    #
    #   <img src="/icons/folder.gif" alt="[DIR]"> <a href="22.04.1/">22.04.1/</a>                2022-08-11 11:16    -   Ubuntu 22.04.1 LTS (Jammy Jellyfish)
    #   <img src="/icons/folder.gif" alt="[DIR]"> <a href="22.10/">22.10/</a>                  2022-10-20 17:11    -   Ubuntu 22.10 (Kinetic Kudu)
    #
    # The timestamp can't be used, because an older release may be uploaded after a newer one.
    #
    releases_page
      .scan(/alt="\[DIR\]"> <a href="(\d\d\.\d\d).+\((\w+) \w+\)$/)
      .sort_by { |numeric_version, codename| numeric_version }
      .last
      &.last
      &.downcase || raise("Release not found!")
  end

  def find_latest_dev_release(ssl_verify_mode)
    images_page = URI.open(DAILY_BUILD_ADDRESS, ssl_verify_mode: ssl_verify_mode).read

    # Sample:
    #
    #   <a href="lunar-desktop-amd64.iso">64-bit PC (AMD64) desktop image</a>
    #
    images_page[/"(\w+)-desktop-amd64\.iso"/, 1] || raise("Development release not found!")
  end

  # Tries the default architecture first; if not found, tries the `all`.
  #
  def find_and_open_package_download_page(release, package, ssl_verify_mode)
    # If the package has "all" architecture, using the specific architecture address
    # will lead to a page which still has the "all" architecture links.
    #
    package_download_address = download_address(release, DEFAULT_ARCHITECTURE, package)

    retries = 0

    begin
      # Search errors yield an error page, but with HTTP error status ðŸ¤¦
      #
      URI
        .open(package_download_address, ssl_verify_mode: ssl_verify_mode).read
        .tap { |content| raise "Package search yielded error page" if content =~ %r{<title>Ubuntu.+Error</title>} }
    rescue OpenURI::HTTPError
      raise if retries >= DOWNLOAD_PAGE_MAX_RETRIES
      retries += 1
      $stderr.puts "Error opening package download page, retrying (#{retries})..."
      retry
    end
  end

  def download_address(release, architecture, package)
    "#{INDEX_SERVER_ADDRESS}/#{release}/#{architecture}/#{package}/download"
  end

  # Sample:
  #
  #   http://de.archive.ubuntu.com/ubuntu/pool/<REPO>/z/zfs-linux/zfsutils-linux_.+?_amd64.deb
  #
  # REPO: `main`, `universe`
  #
  def find_package_address(package_download_page, package)
    [PACKAGE_SERVER_ADDRESS, ALTERNATE_PACKAGE_SERVER_ADDRESS].each do |server_address|
      package_link_regex = %r{
        #{server_address}/ubuntu/pool/\w+/
        \w+/.+?/
        #{Regexp.escape(package)}_.+?_\w+.deb
      }x

      return package_download_page[package_link_regex] if package_download_page[package_link_regex]
    end

    raise "Package link match not found for #{package.inspect}"
  end

  def compose_destination_file(package_address, destination_directory)
    file_basename = File.basename(package_address)
    File.join(destination_directory, file_basename)
  end
end

# The server, architecture, and kernel type, all have a default.
#
if __FILE__ == $PROGRAM_NAME
  long_help = "\
[packages] is in comma-separated form.
[release]  is the Ubuntu release (xenial, zesty...).

The architecture of the packages is `amd64`; the mirror is http://mirrors.kernel.org.

If a package is found in the destination path, it's not downloaded.

The '--no-ssl-verification' is required for a current, unclear issue on Jammy, where opening a package download page (e.g. 'http://packages.ubuntu.com/kinetic/amd64/linux-firmware/download' raises an SSL certificate error).
"

  options = SimpleScripting::Argv.decode(
    ['-d', '--download-to DIRECTORY', "Download directory; defaults to current path."],
    ['-s', '--skip-ssl-verification', "Disable SSL verification; see help"],
    ['-r', '--release RELEASE',       "Download for the given Ubuntu release; if not specified, the latest release version is set; "\
                                      "use '#{DEV_UBUNTU_VERSION_PARAM}' to download the development version"],
    ['-a', '--address-only',          "Print the package download address, without actually downloading it"],
    '*packages',
    long_help: long_help
  ) || exit

  packages = options.delete(:packages)

  DownloadUbuntuPackages.new.execute(packages, **options)
end
