#!/usr/bin/env ruby

require 'simple_scripting/argv'

class GenerateWikiHomeToc
  DEFAULT_DIRECTORY = '.'
  HOME_HEADER = "# Home"
  ROOT_DIRECTORY_HEADER = "Root"
  HOME_FILE = 'Home.md'

  LONG_HELP = <<~STR
    Generate the `Home.md` file of a wiki repository, with a table of contents.

    Each directory is an HTML header level, and the files contained are an entry in the section.
    Files come before directories; for each type, the entries are sorted case-insensitively.

    The directory name is prettified, with similar logic to ActiveSupport's `titleize()`.
    If a document has an H1 header, it's used as entry description, otherwise, the filename is used (with minor editing).

    Links to Markdown documents are changed so that opening them in GitHub will show the HTML page (instead of the raw content).
  STR

  def execute(directory: DEFAULT_DIRECTORY)
    # This allows using '.' as root dir, which avoids storing the root directory itself.
    #
    Dir.chdir(directory)

    output = "#{HOME_HEADER}\n"
    output += print_formatted_directory('.')

    IO.write(HOME_FILE, output)
  end

  private

  def print_formatted_directory(path)
    if File.file?(path)
      format_file_entry(path)
    else
      directory_content = find_directory_content(path)

      output = format_directory_entry(path, directory_content)

      directory_content = sort_directory_content(directory_content)

      directory_content.each do |child_path|
        output += print_formatted_directory(child_path)
      end

      output
    end
  end

  def format_file_entry(file_path)
    file_path = file_path.sub(%r(^\./), "")

    if file_path.end_with?('.md')
      # rstrip() is for cross-platform, as Linux will match the `\r`, if present.
      #
      description = IO.read(file_path)[/^# (.*)/, 1]&.rstrip || File.basename(file_path).chomp('.md')

      file_path = File.basename(file_path).chomp('.md')

      # GitHub issue: colons in wiki links cause the <a> tag not to be generated.
      # See https://github.com/isaacs/github/issues/719#issuecomment-261450416.
      #
      file_path = file_path.gsub(":", "%3A")
    else
      description = File.basename(file_path)
    end

    "- " + "[#{description}](#{file_path})" + "\n"
  end

  def format_directory_entry(dir_path, dir_content)
    # If there are no files, we don't print the Root entry.
    # Note that `dir_content` never includes the root HOME_FILE.
    #
    if dir_path == '.' && !dir_content.any? { |entry| File.file?(entry) }
      return ""
    end

    parents_count, prettified_dirname = if dir_path == '.'
      # The choice of using a depth of 2 is arbitrary. 1 is not appropriate; the alternative is not
      # to print the root header at all.
      #
      [2, ROOT_DIRECTORY_HEADER]
    else
      parents_count = dir_path.split('/').size
      prettified_dirname = File
        .basename(dir_path)
        .capitalize
        .tr('-_', ' ')

      [parents_count, prettified_dirname]
    end

    "\n" + ('#' * parents_count) + " " + prettified_dirname + "\n\n"
  end

  # Note that this never includes the root HOME_FILE.
  #
  def find_directory_content(dir_path)
    Dir["#{dir_path}/*"]
      .select { |entry| !(File.file?(entry) && entry == File.join('.', HOME_FILE)) }
  end

  def sort_directory_content(dir_content)
    dir_content.sort do |path_1, path_2|
      if File.file?(path_1) && File.directory?(path_2)
        -1
      elsif File.directory?(path_1) && File.file?(path_2)
        1
      else
        File.basename(path_1).downcase <=> File.basename(path_2).downcase
      end
    end
  end

end

if __FILE__ == $0
  options = SimpleScripting::Argv.decode(
    '[directory]',
    long_help: GenerateWikiHomeToc::LONG_HELP
  ) || exit

  GenerateWikiHomeToc.new.execute(**options)
end
