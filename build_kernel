#!/usr/bin/env bash

set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

# Example: https://kernel.ubuntu.com/mainline/v6.7/
c_mainline_ppa_url=https://kernel.ubuntu.com/mainline/v
# Example: https://kernel.ubuntu.com/mainline/v6.8-rc1/amd64/linux-modules-6.8.0-060800rc1-generic_6.8.0-060800rc1.202401212233_amd64.deb
c_package_name_pattern="amd64/linux-modules-[[:alnum:]_.-]+_amd64+\.deb"
c_help="Usage: $(basename "$0") [-h|--help] <options...> [packages_destination]

Builds a kernel from the source code.

Options:

- [-v|--kernel-version <version>]
- [-s|--stay-on-branch]           : don't change branch (useful when working with custom branches); requires '--kernel-version'
- [-l|--local-version <name>]     : set the kernel local version (name suffix), defaults to \$BUILD_KERNEL_LOCAL_VERSION; the
                                    minus is automatically added
- [-c|--cherry-pick <c1,c2,...>]  : cherry pick commits; prefix a hash with 'R' in order to create a revert commit
- [-i|--install]
- [-r|--repo-path <path>]         : defaults to (current path or \$BUILD_KERNEL_REPO_PATH env variable)
- [-d|--display-config-diff]

Parameters:

- packages_destination : mandatory; can be specified via \$BUILD_KERNEL_PACKAGES_DESTINATION

Options/parameters override the corresponding env variables.

Workflow:

- fetches the remote(s) and finds the latest patch version, for the running or specified kernel
- checks the target version's branch out
- find the target version's config, and copies it to the packages destination
- patches the configuration to make it compile (assumes it's Ubuntu), and updates it
- removes the old packages/configs from the packages destination
- builds and moves the packages to the packages destination
- if --install is specified, it installs the packages

Cherry picks can also be specified via \$BUILD_KERNEL_CHERRY_PICKS, with format 'shortver1:c1a,c1b;shortver2:c2a,c2b'.
"

v_kernel_version=
v_stay_on_branch=       # boolean; false=blank; true=anything else
v_install=              # boolean; false=blank; true=anything else
v_packages_destination=${BUILD_KERNEL_PACKAGES_DESTINATION:-}
v_repo_path=${BUILD_KERNEL_REPO_PATH:-}
v_local_version=${BUILD_KERNEL_LOCAL_VERSION:-}
v_display_config_diff=  # boolean; false=blank; true=anything else
v_arg_cherry_picks=()   # array; value passed by user as argument

function decode_cmdline_args {
  local params
  params=$(getopt --options hv:sir:l:dc: --long help,kernel-version:,stay-on-branch,install,repo-path:,local-version:,display-config-diff,cherry-pick: --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -v|--kernel-version)
        v_kernel_version=$2
        shift 2 ;;
      -s|--stay-on-branch)
        v_stay_on_branch=1
        shift ;;
      -i|--install)
        v_install=1
        shift ;;
      -r|--repo-path)
        v_repo_path=$2
        shift 2 ;;
      -l|--local-version)
        v_local_version=$2
        shift 2 ;;
      -d|--display-config-diff)
        v_display_config_diff=1
        shift ;;
      -c|cherry-pick)
        mapfile -td, v_arg_cherry_picks < <(echo -n "$2")
        shift 2 ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -gt 1 ]]; then
    echo "$c_help"
    exit 1
  elif [[ -n $v_stay_on_branch && -z $v_kernel_version ]]; then
    echo "$c_help"
    exit 1
  elif [[ $# -eq 1 ]]; then
    v_packages_destination=$1
  else
    if [[ -z $v_packages_destination ]]; then
      >&2 echo "Missing packages destination!"
      exit 1
    fi
  fi

  if [[ ! -d $v_packages_destination ]]; then
    >&2 echo "Invalid packages destination!"
    exit 1
  fi
}

function cache_sudo {
  sudo -v

  while true; do
    sleep 60
    kill -0 "$$" || exit
    sudo -nv
  done 2>/dev/null &
}

# Return format: `M.m.p` or `M.m.0-rcN`
#
function find_running_kernel_version {
  uname -r | sed -E 's/-[^-]+$//'
}

# Return format: `M.m.p` or `M.m-rcN`.
#
function normalize_kernel_version {
  local version=$1

  if [[ $version =~ ^[[:digit:]]+\.[[:digit:]]+$ ]]; then
    echo -n "$version.0"
  else
    echo -n "$version"
  fi
}

# Shorten the kernel version:
#
# - `with_rc`: remove the patch `0` version (present in GA versions), but keep the RC (if present)
# - `no_rc`  : remove both the patch `0` and RC versions
#
# $2: `with_rc` or `no_rc`
#
function short_kernel_version {
  case $2 in
  with_rc)
    echo "$1" | perl -pe 's/^\d+\.\d+\K\.0//'
    ;;
  no_rc)
    echo "$1" | perl -ne 'print /^(\d+\.\d+)/'
    ;;
  *)
    >&2 echo "Invalid short version mode: $2"
    exit 1
    ;;
  esac
}

function fetch_remotes {
  git fetch --all
}

# Return format: `M.m.p` or `M.m-rcN`.
#
function find_latest_kernel_version {
  local normalized_version=$1

  local short_version
  short_version=$(short_kernel_version "$normalized_version" no_rc)
  local escaped_short_version=${short_version//./\\.}

  # Append a zero to GA releases, otherwise, `sort -V` places it before the RCs.
  #
  local latest_version
  latest_version=$(
    git tag \
      | grep -P "^v$escaped_short_version"'($|-rc|\.)' \
      | perl -pe 's/^v\d+\.\d+\K$/.0/' \
      | sort -V \
      | tail -n 1 \
      | perl -pe 's/^v//' \
    || true
  )

  if [[ -z $latest_version ]]; then
    >&2 echo "No kernel versions found for v$short_version."
    exit 1
  fi

  echo -n "$latest_version"
}

function check_if_version_already_packaged {
  local current_kernel_version=$1 building_kernel_version=$2

  # Format: `M.m.p` or or `M.m-rcN`.
  #
  local latest_packaged_version
  latest_packaged_version=$(find_latest_packaged_version "$building_kernel_version")

  if [[ $building_kernel_version == "$latest_packaged_version" ]]; then
    echo "No new version! Latest packaged/available: $building_kernel_version"
    exit 0
  fi
}

# Assumes that there are no multiple builds for the same version.
#
# Return format: `M.m.p` or `M.m-rcN`.
#
function find_latest_packaged_version {
  local kernel_version=$1

  if [[ $kernel_version =~ ^([0-9]+\.[0-9]+)($|-rc) ]]; then
    kernel_version=${BASH_REMATCH[1]}.0
  fi

  # Use the image package for reference.
  #
  # See remove_destination_old_version_files() for the filenames format.
  #
  find "$v_packages_destination" -printf "%P\n" |
    perl -ne 'print $1 if /^linux-image-('"$kernel_version"'(-rc\d+)?)/' |
    sort -V |
    tail -n 1 |
    perl -pe 's/\.0(?=-rc)//' ||
    true
}

function find_amd64_modules_package_link {
  local kernel_version=$1

  local package_kernel_version
  package_kernel_version=$(short_kernel_version "$kernel_version" with_rc)

  local builds_url=$c_mainline_ppa_url$package_kernel_version

  local builds_page_content
  builds_page_content=$(wget --quiet "$builds_url" --output-document - || true)

  if [[ -n $builds_page_content ]]; then
    [[ $builds_page_content =~ $c_package_name_pattern ]] || true

    if [[ -n "${BASH_REMATCH[*]}" ]]; then
      echo -n "$builds_url/${BASH_REMATCH[0]}"
    fi
  fi
}

function download_and_extract_config_file_from_modules_package {
  local amd64_modules_package_link=$1 kernel_version=$2

  local local_package_name=
  local_package_name=$(dirname "$(mktemp --dry-run)")/${amd64_modules_package_link##*/}

  wget "$amd64_modules_package_link" --output-document "$local_package_name"

  # Example: ./boot/config-6.7.0-060700-generic
  #
  dpkg-deb --fsys-tarfile "$local_package_name" | \
    tar xv -C "$v_packages_destination" --wildcards --transform="s/^\.\/boot\/config-.*/config-$kernel_version/" "./boot/config-*"
}

function find_latest_config_file {
  local normalized_version=$1

  local short_version
  short_version=$(short_kernel_version "$normalized_version" no_rc)

  # The match needs to be precise; ignore other configurations (with suffixes) that may be present.
  #
  # See remove_destination_old_version_files() for the filenames format.

  local latest_config_file
  latest_config_file=$(
    find "$v_packages_destination" -regextype egrep -regex ".*/config-$short_version(\.|-rc)[[:digit:]]+" |
      sort -V |
      tail -n 1
  )

  if [[ -z $latest_config_file ]]; then
    >&2 echo "Config file not found (for version $short_version)"
    exit 1
  fi

  echo -n "$latest_config_file"
}

# `M.m.0` versions are stored without the patch version.
#
function create_if_required_and_switch_branch {
  local building_kernel_version=$1

  if [[ $building_kernel_version =~ \.0$ ]]; then
    building_kernel_version=${building_kernel_version%.0}
  fi

  local branch_working_copy=bv"$building_kernel_version"

  # When switching across branches for different non-patch versions, some files may be end up changed,
  # which blocks the checkout; in order to solve this, we do `--force`d checkout.
  #
  if git rev-parse --verify "$branch_working_copy" 2> /dev/null; then
    git checkout --force "$branch_working_copy"
  else
    git checkout -b "$branch_working_copy" --force v"$building_kernel_version"
  fi
}

function same_major_minor_version {
  local short_version_1 short_version_2

  short_version_1=$(short_kernel_version "$1" no_rc)
  short_version_2=$(short_kernel_version "$2" no_rc)

  [[ $short_version_1 == "$short_version_2" ]]
}

function print_sorted_commits_diff {
  local previous_version=$1

  previous_version=$(short_kernel_version "$previous_version" with_rc)

  git cherry -v "v$previous_version" | sort -k3
}

function import_config_file {
  cp "$source_config_file" .config
}

function patch_config {
  scripts/config --set-str SYSTEM_TRUSTED_KEYS ""
  scripts/config --set-str SYSTEM_REVOCATION_KEYS ""

  scripts/config --undefine DEBUG_INFO
  scripts/config --undefine DEBUG_INFO_COMPRESSED
  scripts/config --undefine DEBUG_INFO_REDUCED
  scripts/config --undefine DEBUG_INFO_SPLIT
  scripts/config --undefine GDB_SCRIPTS
  scripts/config --set-val DEBUG_INFO_DWARF5 n
  scripts/config --set-val DEBUG_INFO_NONE y
}

function update_config {
  make olddefconfig
}

function display_config_diff {
  # Assume that the error status 2 (real error) can't happen, because the file exists.
  #
  if ! diff .config{.bak,} > /dev/null; then
    meld .config{.bak,}
  fi
}

function cherry_pick_commits {
  local raw_kernel_version=$1

  if [[ ${#v_arg_cherry_picks[@]} -gt 0 ]]; then
    for commit in "${v_arg_cherry_picks[@]}"; do
      if [[ $commit == R* ]]; then
        git revert --no-edit "${commit#R}"
      else
        git cherry-pick "$commit"
      fi
    done
  else
    local short_kernel_version
    short_kernel_version=$(short_kernel_version "$raw_kernel_version" no_rc)

    # Array of <shortver:c1,c2>.
    #
    local env_cherry_picks
    mapfile -d';' env_cherry_picks < <(echo -n "${BUILD_KERNEL_CHERRY_PICKS:-}")

    for cherry_picks_entry in "${env_cherry_picks[@]}"; do
      local short_version=${cherry_picks_entry%:*}

      if [[ $short_version == "$short_kernel_version" ]]; then
        local raw_commits=${cherry_picks_entry#*:}
        local commits
        mapfile -td, commits < <(echo -n "$raw_commits")

        for commit in "${commits[@]}"; do
          git cherry-pick "$commit"
        done

        break;
      fi
    done
  fi
}

function compile_kernel {
  local make_options=()

  if [[ -n $v_local_version ]]; then
    make_options+=(LOCALVERSION=-"$v_local_version")
  fi

  make -j "$(nproc)" bindeb-pkg "${make_options[@]}"
}

function remove_destination_old_version_files {
  local raw_version=$1 source_config_file=$2

  local short_version
  short_version=$(short_kernel_version "$raw_version" no_rc)

  # This is actually redundant, although by using the basename, we make this logic more robust.
  #
  local source_config_file
  source_config_file=$(basename "$source_config_file")

  # Note that at least one configuration is necessarily present, but not the packages.

  # Sample filenames:
  #
  # - config-6.9.0
  # - config-6.10-rc2
  #
  # Ignore configurations that don't follow the convention, so that they can be used for other purposes,
  # e.g. reference/backup.
  #
  find "$v_packages_destination" -regextype egrep -not -name "$source_config_file" -regex ".*/config-$short_version(\.|-rc)[[:digit:]]+" -exec rm {} \;

  # Sample filenames:
  #
  # - linux-headers-6.1.9-mybuild_6.1.9-mybuild-4_amd64.deb
  # - linux-image-6.1.9-mybuild_6.1.9-mybuild-4_amd64.deb
  # - linux-libc-dev_6.1.9-mybuild-4_amd64.deb
  #
  # - linux-headers-6.10.0-rc2-mybuild_6.10.0-rc2-65_amd64.deb
  #
  find "$v_packages_destination" -regextype egrep -regex ".*/.+[-_]$short_version\..+\.deb" -exec rm {} \;
}

function move_packages_and_cleanup {
  mv ../*.deb "$v_packages_destination"/
  rm ../*.{changes,buildinfo}
}

function install_kernel_packages {
  local normalized_version=$1

  local short_version
  short_version=$(short_kernel_version "$normalized_version" no_rc)

  # See remove_destination_old_version_files() for the filenames format.
  #
  sudo dpkg -i "$v_packages_destination"/linux-*[-_]"$short_version".*-*.deb
}

function main {
  if [[ -n $v_install ]]; then
    cache_sudo
  fi

  if [[ -n $v_repo_path ]]; then
    cd "$v_repo_path"
  fi

  # The tag (and mainline PPA path) for `M.m.0` versions is in the `M.m` format.
  # We need to normalize regardless, because the version can also be passed by the user.

  local current_kernel_version=${v_kernel_version:-"$(find_running_kernel_version)"}
  current_kernel_version=$(normalize_kernel_version "$current_kernel_version")

  fetch_remotes

  local building_kernel_version
  building_kernel_version=$(find_latest_kernel_version "$current_kernel_version")

  if [[ -z $v_stay_on_branch ]]; then
    check_if_version_already_packaged "$current_kernel_version" "$building_kernel_version"

    create_if_required_and_switch_branch "$building_kernel_version"

    # When specifying a different kernel version, don't display the diff.
    #
    if [[ -z $v_kernel_version ]] && same_major_minor_version "$current_kernel_version" "$building_kernel_version"; then
      print_sorted_commits_diff "$current_kernel_version"
    fi
  fi

  # Package operations condensed for readability purposes.

  local amd64_modules_package_link
  amd64_modules_package_link=$(find_amd64_modules_package_link "$building_kernel_version")

  if [[ -n $amd64_modules_package_link ]]; then
    download_and_extract_config_file_from_modules_package "$amd64_modules_package_link" "$building_kernel_version"
  fi

  local source_config_file
  source_config_file=$(find_latest_config_file "$building_kernel_version")

  import_config_file "$source_config_file"

  # Always patch for simplicity, so if we want to replace the config for a version with an existing
  # configuration, we don't need to manually patch it.
  #
  patch_config

  update_config

  if [[ -n $v_display_config_diff ]]; then
    display_config_diff
  fi

  cherry_pick_commits "$current_kernel_version"

  compile_kernel

  remove_destination_old_version_files "$current_kernel_version" "$source_config_file"

  move_packages_and_cleanup

  if [[ -n $v_install ]]; then
    install_kernel_packages "$building_kernel_version"
  fi
}

decode_cmdline_args "$@"
main
