#!/usr/bin/env bash

set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

c_default_local_version=custom
c_help="Usage: $(basename "$0") [-h|--help] <options...> [packages_destination]

Builds a kernel from the source code.

Options:

- [-v|--kernel-version <version>]
- [-l|--local-version <name>]     : kernel local version (name suffix), defaults to (\$BUILD_KERNEL_LOCAL_VERSION
                                    or '$c_default_local_version'); the minus is automatically added
- [-c|--cherry-pick <c1,c2,...>]  : cherry pick commits
- [-i|--install]
- [-r|--repo-path <path>]         : defaults to (current path or \$BUILD_KERNEL_REPO_PATH env variable)
- [-d|--display-config-diff]

'packages_destination' must be specified, either explicitly or via \$BUILD_KERNEL_PACKAGES_DESTINATION env variable.

Workflow:

- fetches the repository and finds the latest patch version (for the current branch version, or the specified one)
- copies the latest version of the configuration for the current kernel, in <packages_destination>
- updates the configuration
- patches the configuration to make it compile (assumes it's Ubuntu)
- copies the configuration to <packages_destination>
- compiles and moves the packages to <packages_destination>
- if --install is specified, it installs the packages

Cherry picks can also be specified via \$BUILD_KERNEL_CHERRY_PICKS, with format 'shortver1:c1a,c1b;shortver2:c2a,c2b'.
The parameter --cherry-pick takes priority over \$BUILD_KERNEL_CHERRY_PICKS.

Notes:

- RC versions are not supported (anymore)"

v_kernel_version=
v_install=              # boolean; false=blank; true=anything else
v_packages_destination=${BUILD_KERNEL_PACKAGES_DESTINATION:-}
v_repo_path=${BUILD_KERNEL_REPO_PATH:-}
v_local_version=${BUILD_KERNEL_LOCAL_VERSION:-}
v_display_config_diff=  # boolean; false=blank; true=anything else
v_arg_cherry_picks=()   # array; value passed by user as argument

function decode_cmdline_args {
  local params
  params=$(getopt --options hv:ir:l:dc: --long help,kernel-version:,install,repo-path:,local-version:,display-config-diff,cherry-pick: --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -v|--kernel-version)
        v_kernel_version=$2
        shift 2 ;;
      -i|--install)
        v_install=1
        shift ;;
      -r|--repo-path)
        v_repo_path=$2
        shift 2 ;;
      -l|--local-version)
        v_local_version=$2
        shift 2 ;;
      -d|--display-config-diff)
        v_display_config_diff=1
        shift ;;
      -c|cherry-pick)
        mapfile -td, v_arg_cherry_picks < <(echo -n "$2")
        shift 2 ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -gt 1 ]]; then
    echo "$c_help"
    exit 1
  elif [[ $# -eq 1 ]]; then
    v_packages_destination=$1
  else
    if [[ -z $v_packages_destination ]]; then
      >&2 echo "Missing packages destination!"
      exit 1
    fi
  fi
}

function cache_sudo {
  sudo -v

  while true; do
    sleep 60
    kill -0 "$$" || exit
    sudo -nv
  done 2>/dev/null &
}

# Return format: M.m.p
#
function find_running_kernel_version {
  uname -r | sed -E 's/-.+//'
}

function fetch_repo {
  git fetch
}

# Return format: `M.m.p`.
#
function find_latest_kernel_version {
  local raw_version=$1

  # Accepts full/short versions.
  #
  local short_version
  short_version=$(echo "$raw_version" | perl -ne 'print /(\d+\.\d+)/')
  local escaped_short_version=${short_version//./\\.}

  git tag |
    grep -P "^v$escaped_short_version" |
    sort -V |
    tail -n 1 |
    perl -pe 's/^v//'
}

# Assumes that there are no multiple builds for the same version.
#
# Return format: `M.m.p`.
#
function find_latest_packaged_version {
  # Accepts full/short versions.
  #
  local raw_version=$1

  local short_version
  short_version=$(echo "$raw_version" | perl -ne 'print /(\d+\.\d+)/')

  # Use the image package for reference.
  #
  find "$v_packages_destination" -regextype egrep -regex ".*/linux-image-$short_version.[[:digit:]]+-.+" -printf "%P\n" |
    sort -V |
    tail -n 1 |
    perl -ne 'print /linux-image-(.*?)-/' ||
    true
}

function find_latest_config_file {
  # Accepts full/short versions.
  #
  local raw_version=$1

  local short_version
  short_version=$(echo "$raw_version" | perl -ne 'print /(\d+\.\d+)/')

  # The match need to be precise; ignore other configurations (with suffixes) that may be present.

  local latest_config_file
  latest_config_file=$(
    find "$v_packages_destination" -regextype egrep -regex ".*/config-$short_version.[[:digit:]]+" |
      sort -V |
      tail -n 1
  )

  if [[ -z $latest_config_file ]]; then
    >&2 echo "Config file not found (for version $short_version)"
    exit 1
  fi

  echo -n "$latest_config_file"
}

function create_if_required_and_switch_branch {
  local latest_kernel_version=$1

  local branch_working_copy=bv"$latest_kernel_version"

  # When switching across branches for different non-patch versions, some files may be end up changed,
  # which blocks the checkout; in order to solve this, we do `--force`d checkout.
  #
  if git rev-parse --verify "$branch_working_copy" 2> /dev/null; then
    git checkout --force "$branch_working_copy"
  else
    git checkout -b "$branch_working_copy" --force v"$latest_kernel_version"
  fi
}

function import_config_file {
  cp "$source_config_file" .config
}

function backup_config {
  cp .config{,.bak}
}

function patch_config {
  scripts/config --set-str SYSTEM_TRUSTED_KEYS ""
  scripts/config --set-str SYSTEM_REVOCATION_KEYS ""

  scripts/config --undefine DEBUG_INFO
  scripts/config --undefine DEBUG_INFO_COMPRESSED
  scripts/config --undefine DEBUG_INFO_REDUCED
  scripts/config --undefine DEBUG_INFO_SPLIT
  scripts/config --undefine GDB_SCRIPTS
  scripts/config --set-val DEBUG_INFO_DWARF5 n
  scripts/config --set-val DEBUG_INFO_NONE y
}

function update_config {
  make olddefconfig
}

function display_config_diff {
  # Assume that the error status 2 (real error) can't happen, because the file exists.
  #
  if ! diff .config{.bak,} > /dev/null; then
    meld .config{.bak,}
  fi
}

function cherry_pick_commits {
  local raw_kernel_version=$1

  if [[ ${#v_arg_cherry_picks[@]} -gt 0 ]]; then
    for commit in "${v_arg_cherry_picks[@]}"; do
      git cherry-pick "$commit"
    done
  else
    local short_kernel_version
    short_kernel_version=$(echo "$raw_kernel_version" | perl -ne 'print /(\d+\.\d+)/')

    # Array of <shortver:c1,c2>.
    #
    local env_cherry_picks
    mapfile -d';' env_cherry_picks < <(echo -n "${BUILD_KERNEL_CHERRY_PICKS:-}")

    for cherry_picks_entry in "${env_cherry_picks[@]}"; do
      local short_version=${cherry_picks_entry%:*}

      if [[ $short_version == "$short_kernel_version" ]]; then
        local raw_commits=${cherry_picks_entry#*:}
        local commits
        mapfile -td, commits < <(echo -n "$raw_commits")

        for commit in "${commits[@]}"; do
          echo git cherry-pick "$commit"
        done

        break;
      fi
    done
  fi
}

function compile_kernel {
  make -j "$(nproc)" bindeb-pkg LOCALVERSION=-"$v_local_version"
}

function remove_destination_old_version_files {
  local raw_version=$1

  local short_version
  short_version=$(echo "$raw_version" | perl -ne 'print /(\d+\.\d+)/')

  # Note that at least one configuration is necessarily present, but not the packages.

  # Ignore configurations that don't follow the convention, so that they can be used for other purposes,
  # e.g. reference/backup.
  #
  find "$v_packages_destination" -regextype egrep -regex ".*/config-$short_version.[[:digit:]]+" -exec rm {} \;

  # The package names are in the format:
  #
  # - linux-headers-6.1.9-sav_6.1.9-sav-4_amd64.deb
  # - linux-image-6.1.9-sav_6.1.9-sav-4_amd64.deb
  # - linux-libc-dev_6.1.9-sav-4_amd64.deb
  #
  find "$v_packages_destination" -regextype egrep -regex ".*/linux.+[-_]$short_version\..+\.deb" -exec rm {} \;
}

function export_config {
  local version=$1

  local config_backup=$v_packages_destination/config-$version

  cp .config "$config_backup"
}

function move_packages_and_cleanup {
  mv ../*.deb "$v_packages_destination"/
  rm ../*.{changes,buildinfo}
}

function install_kernel_packages {
  local latest_kernel_version=$1

  sudo dpkg -i "$v_packages_destination"/linux-*-"$latest_kernel_version"-*.deb
}

function main {
  if [[ -n $v_install ]]; then
    cache_sudo
  fi

  if [[ -n $v_repo_path ]]; then
    cd "$v_repo_path"
  fi

  # Format: `M.m` or `M.m.p`.
  #
  local current_kernel_version=${v_kernel_version:-"$(find_running_kernel_version)"}

  fetch_repo

  # Format: `M.m.p`.
  #
  local latest_kernel_version
  latest_kernel_version=$(find_latest_kernel_version "$current_kernel_version")

  # Format: `M.m.p`.
  #
  local latest_packaged_version
  latest_packaged_version=$(find_latest_packaged_version "$current_kernel_version")

  if [[ $latest_kernel_version == "$latest_packaged_version" ]]; then
    echo "No new version! Latest packaged/available: $latest_kernel_version"
    exit 0
  fi

  local source_config_file
  source_config_file=$(find_latest_config_file "$latest_kernel_version")

  create_if_required_and_switch_branch "$latest_kernel_version"

  import_config_file "$source_config_file"

  backup_config

  # Always patch for simplicity, so if we want to replace the config for a version with an existing
  # configuration, we don't need to manually patch it.
  #
  patch_config

  update_config

  if [[ -n $v_display_config_diff ]]; then
    display_config_diff
  fi

  cherry_pick_commits "$current_kernel_version"

  compile_kernel

  remove_destination_old_version_files "$current_kernel_version"

  export_config "$latest_kernel_version"

  move_packages_and_cleanup

  if [[ -n $v_install ]]; then
    install_kernel_packages "$latest_kernel_version"
  fi
}

decode_cmdline_args "$@"
main
