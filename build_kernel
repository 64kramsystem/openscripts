#!/usr/bin/env bash

set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

c_default_local_version=custom
c_help="Usage: $(basename "$0") [-h|--help] [-v|--kernel-version <version>] [-i|--install] [-r|--repo-path <path>] [-l|--local-version <name>] [packages_destination]

Builds a kernel from the source code:

- fetches the repository and finds the latest patch version (for the current branch version, or the specified one)
- copies the latest version of the configuration for the current kernel, in <packages_destination>
- updates the configuration
- patches the configuration to make it compile (assumes it's Ubuntu)
- copies the configuration to <packages_destination>
- compiles and moves the packages to <packages_destination>
- if --install is specified, it installs the packages

Params:

- '--repo-path' defaults to (current path or \$BUILD_KERNEL_REPO_PATH env variable)
- '--local-version' is the kernel local version (name suffix), it defaults to (\$BUILD_KERNEL_LOCAL_VERSION or '$c_default_local_version'); the minus is automatically added
- 'packages_destination' must be specified, either explicitly or via \$BUILD_KERNEL_PACKAGES_DESTINATION env variable.

Notes:

- RC versions are not supported (anymore)"

v_kernel_version=
v_install=              # boolean; false=blank; true=anything else
v_packages_destination=${BUILD_KERNEL_PACKAGES_DESTINATION:-}
v_repo_path=${BUILD_KERNEL_REPO_PATH:-}
v_local_version=${BUILD_KERNEL_LOCAL_VERSION:-}

function decode_cmdline_args {
  local params
  params=$(getopt --options hv:ir:l: --long help,kernel-version:,install,repo-path:,local-version: --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -v|--kernel-version)
        v_kernel_version=$2
        shift 2 ;;
      -i|--install)
        v_install=1
        shift ;;
      -r|--repo-path)
        v_repo_path=$2
        shift 2 ;;
      -l|--local-version)
        v_local_version=$2
        shift 2 ;;
      --)
        shift
        break ;;
    esac
  done

  if [[ $# -gt 1 ]]; then
    echo "$c_help"
    exit 1
  elif [[ $# -eq 1 ]]; then
    v_packages_destination=$1
  else
    if [[ -z $v_packages_destination ]]; then
      >&2 echo "Missing packages destination!"
      exit 1
    fi
  fi
}

function cache_sudo {
  sudo -v

  while true; do
    sleep 60
    kill -0 "$$" || exit
    sudo -nv
  done 2>/dev/null &
}

# Return format: M.m.p
#
function check_find_current_branch_kernel_version {
  local current_branch
  current_branch=$(git rev-parse --abbrev-ref HEAD | perl -pe "chomp if eof")

  if [[ ! $current_branch =~ ^bv[[:digit:]]\. ]]; then
    >&2 echo "Unexpected current branch!"
    exit 1
  fi

  echo -n "${current_branch#bv}"
}

function fetch_repo {
  git fetch
}

# Return format: `M.m.p`.
#
function find_latest_kernel_version {
  local raw_version=$1

  # Accepts full/short versions.
  #
  local short_version=$(echo "$raw_version" | perl -ne 'print /(\d+\.\d+)/')
  local escaped_short_version=${short_version//./\\.}

  git tag |
    grep -P "^v$escaped_short_version" |
    sort -V |
    tail -n 1 |
    perl -pe 's/^v//'
}

# Assumes that there are no multiple builds for the same version.
#
# Return format: `M.m.p`.
#
function find_latest_packaged_version {
  # Accepts full/short versions.
  #
  local raw_version=$1

  local short_version=$(echo "$raw_version" | perl -ne 'print /(\d+\.\d+)/')

  # Use the image package for reference.
  #
  find "$v_packages_destination" -regextype egrep -regex ".*/linux-image-$short_version.[[:digit:]]+-.+" -printf "%P\n" |
    sort -V |
    tail -n 1 |
    perl -ne 'print /linux-image-(.*?)-/' ||
    true
}

function create_if_required_and_switch_branch {
  local latest_kernel_version=$1

  local branch_working_copy=bv"$latest_kernel_version"

  if git rev-parse --verify "$branch_working_copy" 2> /dev/null; then
    git checkout "$branch_working_copy"
  else
    git checkout -b "$branch_working_copy" v"$latest_kernel_version"
  fi
}

function import_latest_config {
  # Accepts full/short versions.
  #
  local raw_version=$1

  local short_version
  short_version=$(echo "$raw_version" | perl -ne 'print /(\d+\.\d+)/')

  # The match need to be precise; ignore other configurations (with suffixes) that may be present.

  local latest_config
  latest_config_file=$(
    find "$v_packages_destination" -regextype egrep -regex ".*/config-$short_version.[[:digit:]]+" |
      sort -V |
      tail -n 1
  )

  cp "$latest_config_file" .config
}

function backup_config {
  cp .config{,.bak}
}

function patch_config {
  scripts/config --set-str SYSTEM_TRUSTED_KEYS ""
  scripts/config --set-str SYSTEM_REVOCATION_KEYS ""

  scripts/config --undefine DEBUG_INFO
  scripts/config --undefine DEBUG_INFO_COMPRESSED
  scripts/config --undefine DEBUG_INFO_REDUCED
  scripts/config --undefine DEBUG_INFO_SPLIT
  scripts/config --undefine GDB_SCRIPTS
  scripts/config --set-val DEBUG_INFO_DWARF5 n
  scripts/config --set-val DEBUG_INFO_NONE y
}

function update_config {
  make olddefconfig
}

function check_config_diff {
  # Assume that the error status 2 (real error) can't happen, because the file exists.
  #
  if ! diff .config{.bak,} > /dev/null; then
    meld .config{.bak,}
  fi
}

function compile_kernel {
  make -j "$(nproc)" bindeb-pkg LOCALVERSION=-"$v_local_version"
}

function remove_destination_old_version_files {
  local version=$1

  # The package names are in the format:
  #
  # - linux-headers-6.1.9-sav_6.1.9-sav-4_amd64.deb
  # - linux-image-6.1.9-sav_6.1.9-sav-4_amd64.deb
  # - linux-libc-dev_6.1.9-sav-4_amd64.deb
  #
  # WATCH OUT! `-f` is required in case the old files have been removed.
  #
  rm -f "$v_packages_destination"/{config-"$version",linux-*_"$version"-*.deb}
}

function export_config {
  local version=$1

  local config_backup=$v_packages_destination/config-$version

  cp .config "$config_backup"
}

function move_packages_and_cleanup {
  mv ../*.deb "$v_packages_destination"/
  rm ../*.{changes,buildinfo}
}

function install_kernel_packages {
  local latest_kernel_version=$1

  sudo dpkg -i "$v_packages_destination"/linux-*-"$latest_kernel_version"-*.deb
}

function main {
  if [[ -n $v_install ]]; then
    cache_sudo
  fi

  if [[ -n $v_repo_path ]]; then
    cd "$v_repo_path"
  fi

  # Format: `M.m.p`.
  #
  local current_kernel_version latest_kernel_version

  if [[ -n $v_kernel_version ]]; then
    current_kernel_version=$v_kernel_version
    latest_kernel_version=$v_kernel_version
    fetch_repo
  else
    current_kernel_version=$(check_find_current_branch_kernel_version)
    fetch_repo
    latest_kernel_version=$(find_latest_kernel_version "$current_kernel_version")
    local latest_packaged_version
    latest_packaged_version=$(find_latest_packaged_version "$current_kernel_version")

    if [[ $latest_kernel_version == "$latest_packaged_version" ]]; then
      echo "No new version! Latest packaged/availble: $latest_kernel_version"
      exit 0
    fi
  fi

  create_if_required_and_switch_branch "$latest_kernel_version"

  import_latest_config "$current_kernel_version"

  backup_config

  # Always patch for simplicity, so if we want to replace the config for a version with an existing
  # configuration, we don't need to manually patch it.
  #
  patch_config

  if [[ -z $v_kernel_version ]]; then
    update_config
    check_config_diff
  fi

  compile_kernel

  if [[ -z $v_kernel_version ]]; then
    remove_destination_old_version_files "$current_kernel_version"
  fi

  export_config "$latest_kernel_version"

  move_packages_and_cleanup

  if [[ -n $v_install ]]; then
    install_kernel_packages "$latest_kernel_version"
  fi
}

decode_cmdline_args "$@"
main
