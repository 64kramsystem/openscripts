#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

c_default_threshold_days=30
c_help="Usage: $(basename "$0") [<threshold_days>]

Clean the files trashed before the given threshold in days.

The 'trash-cli' package used, is as trashy as it gets, for many reasons; one of the problems is that deletion is performed via base filename, so if two files are one inside the threshold, and one outside, they will both be deleted.
There is a 'trash-empty' command, but it's interactive.

Default threshold: $c_default_threshold_days days."

if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
  echo "$c_help"
  exit 0
elif [[ $# -gt 1 ]]; then
  echo "Unexpected number of parameters"
  exit 1
elif ! command -v trash > /dev/null; then
  echo "The 'trash-cli' tool is required!"
  exit 1
fi

# This is used only for notifying runtime errors.
#
if tty -s; then
  error_notifier="echo"
else
  error_notifier=notify-send
fi

threshold_days=${1:-$c_default_threshold_days}
threshold_seconds=$((threshold_days * 24 * 60 * 60))

while IFS= read -r line || [[ -n "$line" ]]; do
  trash_date=$(echo "$line" | awk '{print $1 " " $2}')

  trash_date_in_seconds=$(date -d "$trash_date" +"%s")
  current_date_in_seconds=$(date +"%s")

  if ((trash_date_in_seconds < current_date_in_seconds - threshold_seconds)); then
    file_basename=$(basename "$(echo "$line" | perl -lane 'print "@F[2..$#F]"')")

    echo "Deleting: $file_basename..."

    if ! trash-rm "$file_basename"; then
      "$error_notifier" "Could not remove \`$file_basename\` from the trash!"
    fi
  fi
done <<< "$(trash-list | sort)"
